/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. PlSql.jj */
/*@egen*/ /** A grammar for Oracle's PL/SQL.

HISTORY:
    30-JUL-2006 John Kristian <jkristian@netflix.com>
        Upgraded to PL/SQL for Oracle 9.2.
        Added code to gather table and procedure names.
        This version doesn't support the entire PL/SQL language,
        merely the subset that's used with my database.

    07-APR-1997 Ramanathan .S <sramji@rocketmail.com>
         grammar for PLSQL inside Oracle*Forms 4.5 (i.e. PlSql 1.x)
*/options{  STATIC = false;  IGNORE_CASE = true;                             
                                                                                        }PARSER_BEGIN(PlSql)package newparser;import java.io.Reader;import java.io.FileInputStream;import java.util.HashSet;import java.util.Set;import java.util.Iterator;class PlSql/*@bgen(jjtree)*/implements PlSqlTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTPlSqlState jjtree = new JJTPlSqlState();

/*@egen*/  /** Parse PL/SQL from files.  Each arg is expected to be the name of a file,
        or "-" to indicate System.in.
     */  public static void main(String args []) throws Throwable  {    if (args.length < 1)    {      args = new String []      {        "-"      }      ;    }    for (int a = 0;    a < args.length;    ++ a)    {      final String input = args [a];      final PlSql parser = new PlSql("-".equals(input) ? System.in : new FileInputStream(input));      try      {        SimpleNode rootNode = parser.CompilationUnit();        rootNode.dump("t");      }      catch (Throwable t)      {        System.err.println(input + ":1: not parsed");        t.printStackTrace();      }      Iterator it = parser.tables.iterator();      System.out.println(it.next() + " tables in " + input);    }  }  public Set < String > functions = new HashSet < String > ();  public Set < String > procedures = new HashSet < String > ();  public Set < String > tables = new HashSet < String > ();  public void reInit(Reader input)  {    ReInit(input);    functions.clear();    procedures.clear();    tables.clear();  }  private String lastObjectReference = null;  protected boolean seeTYPE()  {    return "TYPE".equalsIgnoreCase(getToken(1).image);  }}PARSER_END(PlSql)SKIP :{  " "| "\t"| "\r"| "\n"}/* Prefix      Meaning
    -------------------
    K_          Keyword
    O_          Operator
    S_          Substitutes
*/TOKEN : /* SQL and PLSQL Keywords. prefixed with K_ to avoid name clashes */{  < K_ALL : "ALL" >| < K_ALTER : "ALTER" >| < K_AND : "AND" >| < K_ANY : "ANY" >| < K_AS : "AS" >| < K_ASC : "ASC" >| < K_BEGIN : "BEGIN" >| < K_BETWEEN : "BETWEEN" >| < K_BINARY_INTEGER : "BINARY_INTEGER" >| < K_BOOLEAN : "BOOLEAN" >| < K_BY : "BY" >| < K_CALL : "CALL" >| < K_CASE : "CASE" >| < K_CAST : "CAST" >| < K_CHAR : "CHAR" >| < K_CLOSE : "CLOSE" >| < K_COMMENT : "COMMENT" >| < K_COMMIT : "COMMIT" >| < K_COMMITTED : "COMMITTED" >| < K_CONNECT : "CONNECT" >| < K_CONSTANT : "CONSTANT" >| < K_CONSTRAINT : "CONSTRAINT" >| < K_CONSTRAINTS : "CONSTRAINTS" >| < K_CREATE : "CREATE" >| < K_CURRENT : "CURRENT" >| < K_CURSOR : "CURSOR" >| < K_DATE : "DATE" >| < K_DECIMAL : "DECIMAL" >| < K_DECLARE : "DECLARE" >| < K_DEFAULT : "DEFAULT" >| < K_DELETE : "DELETE" >| < K_DESC : "DESC" >| < K_DISTINCT : "DISTINCT" >| < K_DO : "DO" >| < K_ELSE : "ELSE" >| < K_ELSIF : "ELSIF" >| < K_END : "END" >| < K_ESCAPE : "ESCAPE" >| < K_EXCEPTION : "EXCEPTION" >| < K_EXCEPTION_INIT : "EXCEPTION_INIT" >| < K_EXCLUSIVE : "EXCLUSIVE" >| < K_EXISTS : "EXISTS" >| < K_EXIT : "EXIT" >| < K_FETCH : "FETCH" >| < K_FLOAT : "FLOAT" >| < K_FOR : "FOR" >| < K_FORALL : "FORALL" >| < K_FROM : "FROM" >| < K_FULL : "FULL" >| < K_FUNCTION : "FUNCTION" >| < K_GOTO : "GOTO" >| < K_GROUP : "GROUP" >| < K_HAVING : "HAVING" >| < K_IF : "IF" >| < K_IN : "IN" >| < K_INDEX : "INDEX" >| < K_INNER : "INNER" >| < K_INSERT : "INSERT" >| < K_INTEGER : "INTEGER" >| < K_INTERSECT : "INTERSECT" >| < K_INTO : "INTO" >| < K_IS : "IS" >| < K_ISOLATION : "ISOLATION" >| < K_LEFT : "LEFT" >| < K_LIKE : "LIKE" >| < K_LOCK : "LOCK" >| < K_LOOP : "LOOP" >| < K_MERGE : "MERGE" >| < K_MINUS : "MINUS" >| < K_NATURAL : "NATURAL" >| < K_NOT : "NOT" >| < K_NOWAIT : "NOWAIT" >| < K_NULL : "NULL" >| < K_NULLS : "NULLS" >| < K_NUMBER : "NUMBER" >| < K_OF : "OF" >| < K_ON : "ON" >| < K_ONLY : "ONLY" >| < K_OPEN : "OPEN" >| < K_OR : "OR" >| < K_ORDER : "ORDER" >| < K_OUT : "OUT" >| < K_OVER : "OVER" >| < K_PACKAGE : "PACKAGE" >| < K_PARTITION : "PARTITION" >| < K_POSITIVE : "POSITIVE" >| < K_PRAGMA : "PRAGMA" >| < K_PRIOR : "PRIOR" >| < K_PROCEDURE : "PROCEDURE" >| < K_PX_GRANULE : "PX_GRANULE" >| < K_RAISE : "RAISE" >| < K_RANGE : "RANGE" >| < K_READ : "READ" >| < K_REAL : "REAL" >| < K_RECORD : "RECORD" >| < K_REF : "REF" >| < K_RETURN : "RETURN" >| < K_RETURNS : "RETURNS" >| < K_RETURNING : "RETURNING" >| < K_REVERSE : "REVERSE" >| < K_RIGHT : "RIGHT" >| < K_ROLLBACK : "ROLLBACK" >| < K_ROW : "ROW" >| < K_ROWS : "ROWS" >| < K_SAMPLE : "SAMPLE" >| < K_SAVEPOINT : "SAVEPOINT" >| < K_SELECT : "SELECT" >| < K_SERIALIZABLE : "SERIALIZABLE" >| < K_SET : "SET" >| < K_SHARE : "SHARE" >| < K_SIBLINGS : "SIBLINGS" >| < K_SKIP : "SKIP" >| < K_SMALLINT : "SMALLINT" >| < K_SQL : "SQL" >| < K_START : "START" >| < K_TABLE : "TABLE" >| < K_TEST : "TEST" >| < K_THEN : "THEN" >| < K_TO : "TO" >| < K_TRANSACTION : "TRANSACTION" >| < K_UNION : "UNION" >| < K_UNIQUE : "UNIQUE" >| < K_UPDATE : "UPDATE" >| < K_USE : "USE" >| < K_USING : "USING" >| < K_VALUES : "VALUES" >| < K_VARCHAR2 : "VARCHAR2" >| < K_VARCHAR : "VARCHAR" >| < K_WAIT : "WAIT" >| < K_WHEN : "WHEN" >| < K_WHERE : "WHERE" >| < K_WHILE : "WHILE" >| < K_WITH : "WITH" >| < K_WORK : "WORK" >| < K_WRITE : "WRITE" >}TOKEN : /* Numeric Constants */{  < S_NUMBER :    < FLOAT >  | < FLOAT >    (      [ "e", "E" ] ([ "-", "+" ])? < FLOAT >    )?     >| < #FLOAT :    < INTEGER >  | < INTEGER > ("." < INTEGER >)?  | "." < INTEGER >     >| < #INTEGER : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >}SPECIAL_TOKEN :{  < LINE_COMMENT : "--" (~[ "\r", "\n" ])* >| < MULTI_LINE_COMMENT :    "/*" (~[ "*" ])* "*"    (      "*"    |      (        ~[ "*", "/" ] (~[ "*" ])* "*"      )    )*    "/" >}TOKEN :{  < S_IDENTIFIER :    (< LETTER >)+    (      < DIGIT >    | < LETTER >    | < SPECIAL_CHARS >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #SPECIAL_CHARS :    "$"  | "_"  | "#" >| < S_BIND :    ":"    (      < S_NUMBER >    | < S_IDENTIFIER > ("." < S_IDENTIFIER >)?    ) >| < S_CHAR_LITERAL :    "'" (~[ "'" ])* "'"    (      "'" (~[ "'" ])* "'"    )* >| < S_QUOTED_IDENTIFIER : "\"" (~[ "\n", "\r", "\"" ])* "\"" >}/* Represents a PLSQL code block. */SimpleNode CompilationUnit()       : /**************************/{/*@bgen(jjtree) Root */
  Root jjtn000 = new Root(this, JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Root */
  try {
/*@egen*/  (    FunctionDeclaration()  )  QueryStatement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DeclarationSection() : /**************************/{/*@bgen(jjtree) DeclarationSection */
  DeclarationSection jjtn000 = new DeclarationSection(this, JJTDECLARATIONSECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DeclarationSection */
  try {
/*@egen*/  "DECLARE" Declarations()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Declarations() : /**************************/{/*@bgen(jjtree) Declarations */
  Declarations jjtn000 = new Declarations(this, JJTDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Declarations */
  try {
/*@egen*/  (    (      LOOKAHEAD({ seeTYPE() })      ID("TYPE") < S_IDENTIFIER > "IS" TypeDefinition()    | CursorDeclaration()    | IdentifierDeclaration()    )    ";"  )+  (    LOOKAHEAD({ !seeTYPE() })    FunctionDeclaration()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IdentifierDeclaration() : /**************************/{/*@bgen(jjtree) IdentifierDeclaration */
  IdentifierDeclaration jjtn000 = new IdentifierDeclaration(this, JJTIDENTIFIERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IdentifierDeclaration */
  try {
/*@egen*/  < S_IDENTIFIER >  (    ConstantDeclaration()  |     VariableDeclaration()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CursorDeclaration() : /**************************/{/*@bgen(jjtree) CursorDeclaration */
  CursorDeclaration jjtn000 = new CursorDeclaration(this, JJTCURSORDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CursorDeclaration */
  try {
/*@egen*/  "CURSOR" < S_IDENTIFIER > [ "(" ParameterList() ")" ]   "IS" SelectStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionDeclaration() : /**************************/{/*@bgen(jjtree) FunctionDeclaration */
  FunctionDeclaration jjtn000 = new FunctionDeclaration(this, JJTFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionDeclaration */
  try {
/*@egen*/  "CREATE" "FUNCTION" < S_IDENTIFIER > [ "(" ParameterList() ")" ]   "RETURNS" RemFunc() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void RemFunc() : /**************************/{/*@bgen(jjtree) RemFunc */
  RemFunc jjtn000 = new RemFunc(this, JJTREMFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RemFunc */
  try {
/*@egen*/  "RETURNS"  (    BasicDataTypeDefinition() Option() ScalarFuncBody()  | "TABLE" Option() InlineTVBody()  | < S_IDENTIFIER > "TABLE" TableTypeDef() Option() MultiTVBody()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TableTypeDef() : /**************************/{/*@bgen(jjtree) TableTypeDef */
  TableTypeDef jjtn000 = new TableTypeDef(this, JJTTABLETYPEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TableTypeDef */
  try {
/*@egen*/  ColumnDefinition()  [    "NULL"  | "NOT NULL"  ]  [    "PRIMARY KEY"  | "UNIQUE"  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ColumnDefinition() : /**************************/{/*@bgen(jjtree) ColumnDefinition */
  ColumnDefinition jjtn000 = new ColumnDefinition(this, JJTCOLUMNDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ColumnDefinition */
  try {
/*@egen*/  (    ColumnName() BasicDataTypeDefinition()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BindVariable() :{/*@bgen(jjtree) BindVariable */
  BindVariable jjtn000 = new BindVariable(this, JJTBINDVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BindVariable */
  try {
/*@egen*/  < S_BIND >| ":"  (    < S_NUMBER >  | < S_IDENTIFIER > [ "." < S_IDENTIFIER > ]  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Option() : /**************************/{/*@bgen(jjtree) Option */
  Option jjtn000 = new Option(this, JJTOPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Option */
  try {
/*@egen*/  [ "AS" ]/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ScalarFuncBody() : /**************************/{/*@bgen(jjtree) ScalarFuncBody */
  ScalarFuncBody jjtn000 = new ScalarFuncBody(this, JJTSCALARFUNCBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ScalarFuncBody */
  try {
/*@egen*/  "BEGIN" SequenceOfStatements() "RETURN" SQLSimpleExpression() "END"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void InlineTVBody() : /**************************/{/*@bgen(jjtree) InlineTVBody */
  InlineTVBody jjtn000 = new InlineTVBody(this, JJTINLINETVBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InlineTVBody */
  try {
/*@egen*/  "RETURN" SelectStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MultiTVBody() : /**************************/{/*@bgen(jjtree) MultiTVBody */
  MultiTVBody jjtn000 = new MultiTVBody(this, JJTMULTITVBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MultiTVBody */
  try {
/*@egen*/  "BEGIN" SequenceOfStatements() "RETURN" "END"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void VariableDeclaration() : /**************************/{/*@bgen(jjtree) VariableDeclaration */
  VariableDeclaration jjtn000 = new VariableDeclaration(this, JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VariableDeclaration */
  try {
/*@egen*/  TypeDefinition() [ "NOT" "NULL" ]  [    (      ":="    | "DEFAULT"    )    PlSqlExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ConstantDeclaration() : /**************************/{/*@bgen(jjtree) ConstantDeclaration */
  ConstantDeclaration jjtn000 = new ConstantDeclaration(this, JJTCONSTANTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ConstantDeclaration */
  try {
/*@egen*/  "CONSTANT" TypeDefinition() [ "NOT" "NULL" ]  (    ":="  | "DEFAULT"  )  PlSqlExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TypeDefinition() : /**************************/{/*@bgen(jjtree) TypeDefinition */
  TypeDefinition jjtn000 = new TypeDefinition(this, JJTTYPEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TypeDefinition */
  try {
/*@egen*/  BasicDataTypeDefinition()|   "TABLE" "OF" TypeDefinition()  [    LOOKAHEAD(2)    "INDEX" "BY" BasicDataTypeDefinition()  ]|   LOOKAHEAD(2)  (    < S_IDENTIFIER >    (      "%TYPE"    | "%ROWTYPE"    )  )|   LOOKAHEAD(TableColumn() "%TYPE")  TableColumn() "%TYPE"|   < S_IDENTIFIER >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ // For Alert declarations etc, in Forms
}void BasicDataTypeDefinition() : /**************************/{/*@bgen(jjtree) BasicDataTypeDefinition */
  BasicDataTypeDefinition jjtn000 = new BasicDataTypeDefinition(this, JJTBASICDATATYPEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BasicDataTypeDefinition */
  try {
/*@egen*/  (    "CHAR"  | "VARCHAR"  | "VARCHAR2"  | "INTEGER"  | "NUMBER"  | "NATURAL"  | "REAL"  | "FLOAT"  )  [    "(" < S_NUMBER > [ "," < S_NUMBER > ] ")"  ]| "DATE"| "BINARY_INTEGER"| "BOOLEAN"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/* ---------------- DECLARATIONS SECTION ends here ------------------ *//* ---------------- Code Section starts here ---------------------- */void BeginEndBlock() : /**************************/{/*@bgen(jjtree) BeginEndBlock */
  BeginEndBlock jjtn000 = new BeginEndBlock(this, JJTBEGINENDBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BeginEndBlock */
  try {
/*@egen*/  "BEGIN"   SequenceOfStatements()   "END" [ < S_IDENTIFIER > ] ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SequenceOfStatements() : /**************************/{/*@bgen(jjtree) SequenceOfStatements */
  SequenceOfStatements jjtn000 = new SequenceOfStatements(this, JJTSEQUENCEOFSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SequenceOfStatements */
  try {
/*@egen*/  (    PLSQLStatement()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PLSQLStatement() : /**************************/{/*@bgen(jjtree) PLSQLStatement */
  PLSQLStatement jjtn000 = new PLSQLStatement(this, JJTPLSQLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PLSQLStatement */
  try {
/*@egen*/  GotoStatement()|   IfStatement()|   LabelDeclaration()|   LoopStatement()|   NullStatement()|   ForallStatement()|   SQLStatement()|   [ DeclarationSection() ] BeginEndBlock()|   LOOKAHEAD(DataItem() ":=")  AssignmentStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void LabelDeclaration() : /**************************/{/*@bgen(jjtree) LabelDeclaration */
  LabelDeclaration jjtn000 = new LabelDeclaration(this, JJTLABELDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LabelDeclaration */
  try {
/*@egen*/  "<<" < S_IDENTIFIER > ">>"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ForallStatement() : /**************************/{/*@bgen(jjtree) ForallStatement */
  ForallStatement jjtn000 = new ForallStatement(this, JJTFORALLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ForallStatement */
  try {
/*@egen*/  "FORALL" < S_IDENTIFIER > "IN" PlSqlSimpleExpression() ".." PlSqlSimpleExpression()  (    InsertStatement()  | UpdateStatement()  | DeleteStatement()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLStatement() : /**************************/{/*@bgen(jjtree) SQLStatement */
  SQLStatement jjtn000 = new SQLStatement(this, JJTSQLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLStatement */
  try {
/*@egen*/  CloseStatement()|   DeleteStatement()|   InsertStatement()|   OpenStatement()|   SavepointStatement()|   QueryStatement()|   UpdateStatement()|   MergeStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AssignmentStatement() : /**************************/{/*@bgen(jjtree) AssignmentStatement */
  AssignmentStatement jjtn000 = new AssignmentStatement(this, JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AssignmentStatement */
  try {
/*@egen*/  DataItem() ":=" PlSqlExpression() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void GotoStatement() : /**************************/{/*@bgen(jjtree) GotoStatement */
  GotoStatement jjtn000 = new GotoStatement(this, JJTGOTOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GotoStatement */
  try {
/*@egen*/  "GOTO" < S_IDENTIFIER > ";"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IfStatement() : /**************************/{/*@bgen(jjtree) IfStatement */
  IfStatement jjtn000 = new IfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/  "IF" PlSqlExpression()   "THEN"   SequenceOfStatements()  (    "ELSIF" PlSqlExpression()     "THEN"     SequenceOfStatements()  )*  [ "ELSE"   SequenceOfStatements()   ]   "END" "IF" [ < S_IDENTIFIER > ] ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void LoopStatement() : /**************************/{/*@bgen(jjtree) LoopStatement */
  LoopStatement jjtn000 = new LoopStatement(this, JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LoopStatement */
  try {
/*@egen*/  NormalLoop()|   WhileLoop()|   ForLoop()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void NormalLoop() : /**************************/{/*@bgen(jjtree) NormalLoop */
  NormalLoop jjtn000 = new NormalLoop(this, JJTNORMALLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NormalLoop */
  try {
/*@egen*/  "LOOP"   SequenceOfStatements()   "END" "LOOP" [ < S_IDENTIFIER > ] ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void WhileLoop() : /**************************/{/*@bgen(jjtree) WhileLoop */
  WhileLoop jjtn000 = new WhileLoop(this, JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WhileLoop */
  try {
/*@egen*/  "WHILE" PlSqlExpression()   NormalLoop()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ForLoop() : /**************************/{/*@bgen(jjtree) ForLoop */
  ForLoop jjtn000 = new ForLoop(this, JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ForLoop */
  try {
/*@egen*/  LOOKAHEAD(NumericForLoopLookahead())  NumericForLoop()|   CursorForLoop()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void NumericForLoopLookahead() : /**************************/{/*@bgen(jjtree) NumericForLoopLookahead */
  NumericForLoopLookahead jjtn000 = new NumericForLoopLookahead(this, JJTNUMERICFORLOOPLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NumericForLoopLookahead */
  try {
/*@egen*/  "FOR" < S_IDENTIFIER > "IN" [ "REVERSE" ]   PlSqlSimpleExpression() ".."/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void NumericForLoop() : /**************************/{/*@bgen(jjtree) NumericForLoop */
  NumericForLoop jjtn000 = new NumericForLoop(this, JJTNUMERICFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NumericForLoop */
  try {
/*@egen*/  "FOR" < S_IDENTIFIER > "IN" [ "REVERSE" ]   PlSqlSimpleExpression() ".." PlSqlSimpleExpression()   NormalLoop()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CursorForLoop() : /**************************/{/*@bgen(jjtree) CursorForLoop */
  CursorForLoop jjtn000 = new CursorForLoop(this, JJTCURSORFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CursorForLoop */
  try {
/*@egen*/  "FOR" < S_IDENTIFIER > "IN"  (    CursorReference() [ "(" Arguments() ")" ]  | "(" SelectStatement() ")"  )  NormalLoop()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CursorReference() : /**************************/{/*@bgen(jjtree) CursorReference */
  CursorReference jjtn000 = new CursorReference(this, JJTCURSORREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CursorReference */
  try {
/*@egen*/  ObjectReference()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void NullStatement() : /**************************/{/*@bgen(jjtree) NullStatement */
  NullStatement jjtn000 = new NullStatement(this, JJTNULLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NullStatement */
  try {
/*@egen*/  "NULL" ";"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CloseStatement() : /**************************/{/*@bgen(jjtree) CloseStatement */
  CloseStatement jjtn000 = new CloseStatement(this, JJTCLOSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CloseStatement */
  try {
/*@egen*/  "CLOSE" < S_IDENTIFIER > ";"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void OpenStatement() : /**************************/{/*@bgen(jjtree) OpenStatement */
  OpenStatement jjtn000 = new OpenStatement(this, JJTOPENSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OpenStatement */
  try {
/*@egen*/  "OPEN" CursorReference() [ "(" Arguments() ")" ] ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SavepointStatement() :{/*@bgen(jjtree) SavepointStatement */
  SavepointStatement jjtn000 = new SavepointStatement(this, JJTSAVEPOINTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SavepointStatement */
  try {
/*@egen*/  "SAVEPOINT" < S_IDENTIFIER > ";"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void UpdateStatement() : /**************************/{/*@bgen(jjtree) UpdateStatement */
  UpdateStatement jjtn000 = new UpdateStatement(this, JJTUPDATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) UpdateStatement */
  try {
/*@egen*/  "UPDATE"  (    TableName()  | "(" SubQuery() ")"  )  [ OracleObjectName() ]   "SET" ColumnValues()  [    "WHERE"    (      SQLExpression()    | "CURRENT" "OF" < S_IDENTIFIER >    )  ]  [ ReturningClause() ]   ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ReturningClause() :{/*@bgen(jjtree) ReturningClause */
  ReturningClause jjtn000 = new ReturningClause(this, JJTRETURNINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ReturningClause */
  try {
/*@egen*/  "RETURNING" SQLExpression()  (    "," SQLExpression()  )*  IntoClause()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ColumnValues() : /**************************/{/*@bgen(jjtree) ColumnValues */
  ColumnValues jjtn000 = new ColumnValues(this, JJTCOLUMNVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ColumnValues */
  try {
/*@egen*/  ColumnValue()  (    "," ColumnValue()  )*| "(" TableColumn()  (    "," TableColumn()  )*  ")" "=" "(" SelectStatement() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ColumnValue() : /**************************/{/*@bgen(jjtree) ColumnValue */
  ColumnValue jjtn000 = new ColumnValue(this, JJTCOLUMNVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ColumnValue */
  try {
/*@egen*/  TableColumn() "=" PlSqlExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void InsertStatement() : /**************************/{/*@bgen(jjtree) InsertStatement */
  InsertStatement jjtn000 = new InsertStatement(this, JJTINSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InsertStatement */
  try {
/*@egen*/  "INSERT" "INTO" TableName() [ OracleObjectName() ]  [    LOOKAHEAD(2)    "(" TableColumn()    (      "," TableColumn()    )*    ")"  ]  (    "VALUES" "(" PlSqlExpressionList() ")" [ ReturningClause() ]  | SubQuery()  )  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MergeStatement() : /**************************/{/*@bgen(jjtree) MergeStatement */
  MergeStatement jjtn000 = new MergeStatement(this, JJTMERGESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MergeStatement */
  try {
/*@egen*/  "MERGE" "INTO" TableReference()   "USING" TableReference() "ON" "(" SQLExpression() ")"   "WHEN" ID("MATCHED") "THEN"   "UPDATE" "SET" MergeSetColumn()  (    "," MergeSetColumn()  )*  "WHEN" "NOT" ID("MATCHED") "THEN"   "INSERT" "(" TableColumn()  (    "," TableColumn()  )*  ")"   "VALUES" "("  (    "DEFAULT"  | SQLExpressionList()  )  ")"   ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MergeSetColumn() : /**************************/{/*@bgen(jjtree) MergeSetColumn */
  MergeSetColumn jjtn000 = new MergeSetColumn(this, JJTMERGESETCOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MergeSetColumn */
  try {
/*@egen*/  TableColumn() "="  (    "DEFAULT"  | SQLExpression()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DeleteStatement() : /**************************/{/*@bgen(jjtree) DeleteStatement */
  DeleteStatement jjtn000 = new DeleteStatement(this, JJTDELETESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DeleteStatement */
  try {
/*@egen*/  "DELETE" [ "FROM" ] TableName() [ OracleObjectName() ]  [    "WHERE"    (      SQLExpression()    | "CURRENT" "OF" < S_IDENTIFIER >    )  ]  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void QueryStatement() : /**************************/{/*@bgen(jjtree) QueryStatement */
  QueryStatement jjtn000 = new QueryStatement(this, JJTQUERYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) QueryStatement */
  try {
/*@egen*/  SelectStatement()   ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}// PLSQL Expression and it's childs
void PlSqlExpression() :{/*@bgen(jjtree) PlSqlExpression */
  PlSqlExpression jjtn000 = new PlSqlExpression(this, JJTPLSQLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlSqlExpression */
  try {
/*@egen*/  PlSqlAndExpression()  (    "OR" PlSqlAndExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PlSqlAndExpression() :{/*@bgen(jjtree) PlSqlAndExpression */
  PlSqlAndExpression jjtn000 = new PlSqlAndExpression(this, JJTPLSQLANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlSqlAndExpression */
  try {
/*@egen*/  PlSqlUnaryLogicalExpression()  (    "AND" PlSqlUnaryLogicalExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PlSqlUnaryLogicalExpression() :{/*@bgen(jjtree) PlSqlUnaryLogicalExpression */
  PlSqlUnaryLogicalExpression jjtn000 = new PlSqlUnaryLogicalExpression(this, JJTPLSQLUNARYLOGICALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlSqlUnaryLogicalExpression */
  try {
/*@egen*/  [ "NOT" ] PlSqlRelationalExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PlSqlRelationalExpression() :{/*@bgen(jjtree) PlSqlRelationalExpression */
  PlSqlRelationalExpression jjtn000 = new PlSqlRelationalExpression(this, JJTPLSQLRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlSqlRelationalExpression */
  try {
/*@egen*/  PlSqlSimpleExpression()  (    Relop() PlSqlSimpleExpression()  |     LOOKAHEAD(2)    PlSqlInClause()  |     LOOKAHEAD(2)    PlSqlBetweenClause()  |     LOOKAHEAD(2)    PlSqlLikeClause()  |     IsNullClause()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PlSqlExpressionList() :{/*@bgen(jjtree) PlSqlExpressionList */
  PlSqlExpressionList jjtn000 = new PlSqlExpressionList(this, JJTPLSQLEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlSqlExpressionList */
  try {
/*@egen*/  PlSqlExpression()  (    "," PlSqlExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PlSqlInClause() :{/*@bgen(jjtree) PlSqlInClause */
  PlSqlInClause jjtn000 = new PlSqlInClause(this, JJTPLSQLINCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlSqlInClause */
  try {
/*@egen*/  [ "NOT" ] "IN" "(" PlSqlExpressionList() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PlSqlBetweenClause() :{/*@bgen(jjtree) PlSqlBetweenClause */
  PlSqlBetweenClause jjtn000 = new PlSqlBetweenClause(this, JJTPLSQLBETWEENCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlSqlBetweenClause */
  try {
/*@egen*/  [ "NOT" ] "BETWEEN" PlSqlSimpleExpression() "AND" PlSqlSimpleExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PlSqlLikeClause() :{/*@bgen(jjtree) PlSqlLikeClause */
  PlSqlLikeClause jjtn000 = new PlSqlLikeClause(this, JJTPLSQLLIKECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlSqlLikeClause */
  try {
/*@egen*/  [ "NOT" ] "LIKE" PlSqlSimpleExpression() [ "ESCAPE" PlSqlSimpleExpression() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IsNullClause() :{/*@bgen(jjtree) IsNullClause */
  IsNullClause jjtn000 = new IsNullClause(this, JJTISNULLCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IsNullClause */
  try {
/*@egen*/  "IS" [ "NOT" ] "NULL"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PlSqlSimpleExpression() :{/*@bgen(jjtree) PlSqlSimpleExpression */
  PlSqlSimpleExpression jjtn000 = new PlSqlSimpleExpression(this, JJTPLSQLSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlSqlSimpleExpression */
  try {
/*@egen*/  PlSqlMultiplicativeExpression()  (    (      "+"    | "-"    | "||"    )    PlSqlMultiplicativeExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PlSqlMultiplicativeExpression() :{/*@bgen(jjtree) PlSqlMultiplicativeExpression */
  PlSqlMultiplicativeExpression jjtn000 = new PlSqlMultiplicativeExpression(this, JJTPLSQLMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlSqlMultiplicativeExpression */
  try {
/*@egen*/  PlSqlExponentExpression()  (    LOOKAHEAD(1)    (      "*"    | "/"    | ID("MOD")    )    PlSqlExponentExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PlSqlExponentExpression() :{/*@bgen(jjtree) PlSqlExponentExpression */
  PlSqlExponentExpression jjtn000 = new PlSqlExponentExpression(this, JJTPLSQLEXPONENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlSqlExponentExpression */
  try {
/*@egen*/  PlSqlUnaryExpression()  (    "**" PlSqlUnaryExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PlSqlUnaryExpression() :{/*@bgen(jjtree) PlSqlUnaryExpression */
  PlSqlUnaryExpression jjtn000 = new PlSqlUnaryExpression(this, JJTPLSQLUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlSqlUnaryExpression */
  try {
/*@egen*/  (    (      "+"    | "-"    )    PlSqlPrimaryExpression()  )|   PlSqlPrimaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void PlSqlPrimaryExpression() :{/*@bgen(jjtree) PlSqlPrimaryExpression */
  PlSqlPrimaryExpression jjtn000 = new PlSqlPrimaryExpression(this, JJTPLSQLPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlSqlPrimaryExpression */
  try {
/*@egen*/  < S_NUMBER >| < S_CHAR_LITERAL >| "NULL"| SQLCaseExpression()| "("  (    LOOKAHEAD(3)    SelectStatement()  | PlSqlExpression()  )  ")"| BindVariable()| LOOKAHEAD(2)  SQLCastExpression()| LOOKAHEAD(IntervalExpression())  IntervalExpression()| LOOKAHEAD(2)  (    < S_IDENTIFIER >  | "SQL"  )  "%" ID("FOUND|NOTFOUND|ISOPEN|ROWCOUNT")| LOOKAHEAD(FunctionReference() "(")  FunctionCall()| ObjectReference()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ // Might be a call to a parameter-less function.
}/* ----------------------- PLSQL Code Block Ends here -------------- *//* ---------------- General Productions --------------------- */void TableColumn() :{/*@bgen(jjtree) TableColumn */
  TableColumn jjtn000 = new TableColumn(this, JJTTABLECOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TableColumn */
  try {
/*@egen*/  ObjectReference()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String OracleObjectName() : /********************/{/*@bgen(jjtree) OracleObjectName */
  OracleObjectName jjtn000 = new OracleObjectName(this, JJTORACLEOBJECTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OracleObjectName */
  try {
/*@egen*/  < S_IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return token.image;  }| < S_QUOTED_IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    String s = token.image;    return s.substring(1, s.length() - 1);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String TNSName() :{/*@bgen(jjtree) TNSName */
  TNSName jjtn000 = new TNSName(this, JJTTNSNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  StringBuilder name = new StringBuilder();}{/*@bgen(jjtree) TNSName */
  try {
/*@egen*/  < S_IDENTIFIER >  {    name.append(token.image);  }  (    "." < S_IDENTIFIER >    {      name.append(".").append(token.image);    }  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return name.toString();  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Relop() : /********************/{/*@bgen(jjtree) Relop */
  Relop jjtn000 = new Relop(this, JJTRELOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Relop */
  try {
/*@egen*/  "="| "!" "="| "#"| LOOKAHEAD(2)  ">" "="| ">"| LOOKAHEAD(2)  "<" ">"| LOOKAHEAD(2)  "<" "="| "<"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TableName() : /**************************/{/*@bgen(jjtree) TableName */
  TableName jjtn000 = new TableName(this, JJTTABLENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String s;  StringBuilder name = new StringBuilder();}{/*@bgen(jjtree) TableName */
  try {
/*@egen*/  // schema.table@link
  s = OracleObjectName()  {    name.append(s);  }  [    "." s = OracleObjectName()    {      name.append(".").append(s);    }  ]  [    "@" s = TNSName()    {      name.append("@").append(s);    }  ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    tables.add(name.toString().toUpperCase());  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ParameterList() : /********************/{/*@bgen(jjtree) ParameterList */
  ParameterList jjtn000 = new ParameterList(this, JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ParameterList */
  try {
/*@egen*/  Parameter()  (    "," Parameter()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void NumOrID() : /********************/{/*@bgen(jjtree) NumOrID */
  NumOrID jjtn000 = new NumOrID(this, JJTNUMORID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NumOrID */
  try {
/*@egen*/  < S_IDENTIFIER >|  (    [      "+"    | "-"    ]    < S_NUMBER >  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Parameter() : /********************/{/*@bgen(jjtree) Parameter */
  Parameter jjtn000 = new Parameter(this, JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Parameter */
  try {
/*@egen*/  < S_IDENTIFIER >  [    [ "IN" ] [ "OUT" ] TypeDefinition()    [      (        ":="      | "DEFAULT"      )      PlSqlExpression()    ]  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Arguments() : /********************/{/*@bgen(jjtree) Arguments */
  Arguments jjtn000 = new Arguments(this, JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Arguments */
  try {
/*@egen*/  Argument()  (    "," Argument()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Argument() : /********************/{/*@bgen(jjtree) Argument */
  Argument jjtn000 = new Argument(this, JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Argument */
  try {
/*@egen*/  [    LOOKAHEAD(2)    < S_IDENTIFIER > "=>"  ]  PlSqlExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/* --------------- General Productions ends here --------------- *//* ----------- SQL productions start here ----------------- */void SelectStatement() :{/*@bgen(jjtree) SelectStatement */
  SelectStatement jjtn000 = new SelectStatement(this, JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectStatement */
  try {
/*@egen*/  SelectWithoutOrder()   [ OrderByClause() ]   [ ForUpdateClause() ]   [ "SKIP" ID("LOCKED") ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SelectWithoutOrder() :{/*@bgen(jjtree) SelectWithoutOrder */
  SelectWithoutOrder jjtn000 = new SelectWithoutOrder(this, JJTSELECTWITHOUTORDER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectWithoutOrder */
  try {
/*@egen*/  SelectSet()  (    (      ("UNION" [ "ALL" ])    | "INTERSECT"    | "MINUS"    )    SelectSet()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SelectSet() :{/*@bgen(jjtree) SelectSet */
  SelectSet jjtn000 = new SelectSet(this, JJTSELECTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectSet */
  try {
/*@egen*/  Select()| "(" SubQuery() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Select() :{/*@bgen(jjtree) Select */
  Select jjtn000 = new Select(this, JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Select */
  try {
/*@egen*/  "SELECT"  [    "ALL"  | "DISTINCT"  | "UNIQUE"  ]  SelectList()   [ IntoClause() ]   FromClause()   [ WhereClause() ]  [    HavingClause() GroupByClause()  | GroupByClause() [ HavingClause() ]  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/* Checks for whatever follows  SELECT */void SelectList() :{/*@bgen(jjtree) SelectList */
  SelectList jjtn000 = new SelectList(this, JJTSELECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectList */
  try {
/*@egen*/  "*"| SelectItem()  (    "," SelectItem()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SelectItem() :{/*@bgen(jjtree) SelectItem */
  SelectItem jjtn000 = new SelectItem(this, JJTSELECTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectItem */
  try {
/*@egen*/  (    LOOKAHEAD(2)    OracleObjectName() ".*" // table.*
  | LOOKAHEAD(4)    OracleObjectName() "." OracleObjectName() ".*" // schema.table.*
  | SQLSimpleExpression() // column name or expression
  )  [    [ "AS" ] SelectItemAlias()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SelectItemAlias() :{/*@bgen(jjtree) SelectItemAlias */
  SelectItemAlias jjtn000 = new SelectItemAlias(this, JJTSELECTITEMALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectItemAlias */
  try {
/*@egen*/  OracleObjectName()  // Some keywords are acceptable as aliases:
| "RETURNING"| "WHEN"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void WindowingClause() :{/*@bgen(jjtree) WindowingClause */
  WindowingClause jjtn000 = new WindowingClause(this, JJTWINDOWINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WindowingClause */
  try {
/*@egen*/  (    "ROWS"  | "RANGE"  )  (    "CURRENT" "ROW"  | SQLSimpleExpression() ID("PRECEDING") // perhaps UNBOUNDED PRECEDING
  | "BETWEEN"    (      "CURRENT" "ROW"    | SQLSimpleExpression() ID("PRECEDING|FOLLOWING") // perhaps UNBOUNDED FOLLOWING
    )    "AND"    (      "CURRENT" "ROW"    | SQLSimpleExpression() ID("PRECEDING|FOLLOWING") // perhaps UNBOUNDED PRECEDING
    )  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IntoClause() :{/*@bgen(jjtree) IntoClause */
  IntoClause jjtn000 = new IntoClause(this, JJTINTOCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IntoClause */
  try {
/*@egen*/  "INTO" DataItem()  (    "," DataItem()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DataItem() :{/*@bgen(jjtree) DataItem */
  DataItem jjtn000 = new DataItem(this, JJTDATAITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DataItem */
  try {
/*@egen*/  (    < S_IDENTIFIER > [ "." < S_IDENTIFIER > ]  | BindVariable()  )  [ "(" PlSqlSimpleExpression() ")" ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ // collection subscript
}void FromClause() :{/*@bgen(jjtree) FromClause */
  FromClause jjtn000 = new FromClause(this, JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FromClause */
  try {
/*@egen*/  "FROM" TableReference()  (    "," TableReference()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TableReference() :{/*@bgen(jjtree) TableReference */
  TableReference jjtn000 = new TableReference(this, JJTTABLEREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TableReference */
  try {
/*@egen*/  "ONLY" "(" QueryTableExpression() ")"| QueryTableExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void QueryTableExpression() :{/*@bgen(jjtree) QueryTableExpression */
  QueryTableExpression jjtn000 = new QueryTableExpression(this, JJTQUERYTABLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) QueryTableExpression */
  try {
/*@egen*/  (    TableName() // might also be a query name
  | TableCollectionExpression()  | LOOKAHEAD(3)    "(" SubQuery() ")"  | "(" TableReference() ")"  | BindVariable() // not valid SQL, but appears in StatsPack SQL text
  )  [ "PX_GRANULE" "(" < S_NUMBER > "," < S_IDENTIFIER > "," < S_IDENTIFIER > ")" ]  [    "SAMPLE" [ ID("BLOCK") ] "(" < S_NUMBER > ")"  ]  [ OracleObjectName() ] // alias
  (    Join()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TableCollectionExpression() :{/*@bgen(jjtree) TableCollectionExpression */
  TableCollectionExpression jjtn000 = new TableCollectionExpression(this, JJTTABLECOLLECTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TableCollectionExpression */
  try {
/*@egen*/  "TABLE" "(" SQLSimpleExpression() ")" [ "(" "+" ")" ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Join() :{/*@bgen(jjtree) Join */
  Join jjtn000 = new Join(this, JJTJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Join */
  try {
/*@egen*/  JoinType() ID("JOIN") TableReference()  (    "ON" SQLExpression()  | "USING" "(" ColumnName()    (      "," ColumnName()    )*    ")"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  //| ("CROSS" | "NATURAL" JoinType()) ID("JOIN") TableReference()
}void JoinType() :{/*@bgen(jjtree) JoinType */
  JoinType jjtn000 = new JoinType(this, JJTJOINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) JoinType */
  try {
/*@egen*/  "INNER"|  (    "LEFT"  | "RIGHT"  | "FULL"  )  ID("OUTER")/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ColumnName() :{/*@bgen(jjtree) ColumnName */
  ColumnName jjtn000 = new ColumnName(this, JJTCOLUMNNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ColumnName */
  try {
/*@egen*/  < S_IDENTIFIER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void WhereClause() :{/*@bgen(jjtree) WhereClause */
  WhereClause jjtn000 = new WhereClause(this, JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WhereClause */
  try {
/*@egen*/  "WHERE" SQLExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void GroupByClause() :{/*@bgen(jjtree) GroupByClause */
  GroupByClause jjtn000 = new GroupByClause(this, JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GroupByClause */
  try {
/*@egen*/  "GROUP" "BY" SQLExpressionList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void HavingClause() :{/*@bgen(jjtree) HavingClause */
  HavingClause jjtn000 = new HavingClause(this, JJTHAVINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) HavingClause */
  try {
/*@egen*/  "HAVING" SQLExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void OrderByClause() :{/*@bgen(jjtree) OrderByClause */
  OrderByClause jjtn000 = new OrderByClause(this, JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OrderByClause */
  try {
/*@egen*/  "ORDER" [ "SIBLINGS" ] "BY" OrderByExpression()  (    "," OrderByExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void OrderByExpression() :{/*@bgen(jjtree) OrderByExpression */
  OrderByExpression jjtn000 = new OrderByExpression(this, JJTORDERBYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OrderByExpression */
  try {
/*@egen*/  SQLSimpleExpression()  [    "ASC"  | "DESC"  ]  [ "NULLS" ID("LAST") ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ForUpdateClause() :{/*@bgen(jjtree) ForUpdateClause */
  ForUpdateClause jjtn000 = new ForUpdateClause(this, JJTFORUPDATECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ForUpdateClause */
  try {
/*@egen*/  "FOR" "UPDATE"  [    "OF" TableColumn()    (      "," TableColumn()    )*  ]  [    "NOWAIT"  | "WAIT" SQLSimpleExpression()  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLExpression() :{/*@bgen(jjtree) SQLExpression */
  SQLExpression jjtn000 = new SQLExpression(this, JJTSQLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLExpression */
  try {
/*@egen*/  SQLAndExpression()  (    "OR" SQLAndExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLAndExpression() :{/*@bgen(jjtree) SQLAndExpression */
  SQLAndExpression jjtn000 = new SQLAndExpression(this, JJTSQLANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLAndExpression */
  try {
/*@egen*/  SQLUnaryLogicalExpression()  (    "AND" SQLUnaryLogicalExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLUnaryLogicalExpression() :{/*@bgen(jjtree) SQLUnaryLogicalExpression */
  SQLUnaryLogicalExpression jjtn000 = new SQLUnaryLogicalExpression(this, JJTSQLUNARYLOGICALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLUnaryLogicalExpression */
  try {
/*@egen*/  LOOKAHEAD(2)  ExistsClause()|  (    [ "NOT" ] SQLRelationalExpression()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ExistsClause() :{/*@bgen(jjtree) ExistsClause */
  ExistsClause jjtn000 = new ExistsClause(this, JJTEXISTSCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ExistsClause */
  try {
/*@egen*/  [ "NOT" ] "EXISTS" "(" SubQuery() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLRelationalExpression() :{/*@bgen(jjtree) SQLRelationalExpression */
  SQLRelationalExpression jjtn000 = new SQLRelationalExpression(this, JJTSQLRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLRelationalExpression */
  try {
/*@egen*/  /* Only after looking past "(", Expression() and "," we will know that
       it is expression list */  (    LOOKAHEAD("(" SQLSimpleExpression() ",")    "(" SQLExpressionList() ")"  |    (      [ "PRIOR" ] SQLSimpleExpression()    )  )  /* Lookahead(2) is required because of NOT IN,NOT BETWEEN and NOT LIKE */  (    SQLRelationalOperatorExpression()  | LOOKAHEAD(2)    (      SQLInClause()    )  | LOOKAHEAD(2)    (      SQLBetweenClause()    )  | LOOKAHEAD(2)    (      SQLLikeClause()    )  | IsNullClause()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLExpressionList() :{/*@bgen(jjtree) SQLExpressionList */
  SQLExpressionList jjtn000 = new SQLExpressionList(this, JJTSQLEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLExpressionList */
  try {
/*@egen*/  SQLExpression()  (    "," SQLExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLRelationalOperatorExpression() :{/*@bgen(jjtree) SQLRelationalOperatorExpression */
  SQLRelationalOperatorExpression jjtn000 = new SQLRelationalOperatorExpression(this, JJTSQLRELATIONALOPERATOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLRelationalOperatorExpression */
  try {
/*@egen*/  Relop()  /* Only after seeing an ANY/ALL or "(" followed by a SubQuery() we can
    determine that is is a sub-query
    */  (    LOOKAHEAD("ANY"  | "ALL"  | "(" "SELECT")    (      [        "ALL"      | "ANY"      ]      "(" SubQuery() ")"    )  |     [ "PRIOR" ] SQLSimpleExpression()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLInClause() :{/*@bgen(jjtree) SQLInClause */
  SQLInClause jjtn000 = new SQLInClause(this, JJTSQLINCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLInClause */
  try {
/*@egen*/  [ "NOT" ] "IN" "("  (    LOOKAHEAD(3)    SubQuery()  | SQLExpressionList()  )  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLBetweenClause() :{/*@bgen(jjtree) SQLBetweenClause */
  SQLBetweenClause jjtn000 = new SQLBetweenClause(this, JJTSQLBETWEENCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLBetweenClause */
  try {
/*@egen*/  [ "NOT" ] "BETWEEN" SQLSimpleExpression() "AND" SQLSimpleExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLLikeClause() :{/*@bgen(jjtree) SQLLikeClause */
  SQLLikeClause jjtn000 = new SQLLikeClause(this, JJTSQLLIKECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLLikeClause */
  try {
/*@egen*/  [ "NOT" ] "LIKE" SQLSimpleExpression() [ "ESCAPE" SQLSimpleExpression() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLSimpleExpression() :{/*@bgen(jjtree) SQLSimpleExpression */
  SQLSimpleExpression jjtn000 = new SQLSimpleExpression(this, JJTSQLSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLSimpleExpression */
  try {
/*@egen*/  SQLMultiplicativeExpression()  (    (      "+"    | "-"    | "||"    )    SQLMultiplicativeExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLMultiplicativeExpression() :{/*@bgen(jjtree) SQLMultiplicativeExpression */
  SQLMultiplicativeExpression jjtn000 = new SQLMultiplicativeExpression(this, JJTSQLMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLMultiplicativeExpression */
  try {
/*@egen*/  SQLExponentExpression()  (    (      "*"    | "/"    )    SQLExponentExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLExponentExpression() :{/*@bgen(jjtree) SQLExponentExpression */
  SQLExponentExpression jjtn000 = new SQLExponentExpression(this, JJTSQLEXPONENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLExponentExpression */
  try {
/*@egen*/  SQLUnaryExpression()  (    "**" SQLUnaryExpression()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLUnaryExpression() :{/*@bgen(jjtree) SQLUnaryExpression */
  SQLUnaryExpression jjtn000 = new SQLUnaryExpression(this, JJTSQLUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLUnaryExpression */
  try {
/*@egen*/  [    "+"  | "-"  ]  SQLPrimaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLPrimaryExpression() :{/*@bgen(jjtree) SQLPrimaryExpression */
  SQLPrimaryExpression jjtn000 = new SQLPrimaryExpression(this, JJTSQLPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLPrimaryExpression */
  try {
/*@egen*/  < S_NUMBER >| < S_CHAR_LITERAL >| "NULL"| SQLCaseExpression()| "("  (    LOOKAHEAD(3)    SelectStatement()  | SQLExpression()  )  ")"| BindVariable()| LOOKAHEAD(2)  SQLCastExpression()| LOOKAHEAD(IntervalExpression())  IntervalExpression()| LOOKAHEAD(OuterJoinExpression())  OuterJoinExpression()| LOOKAHEAD(FunctionReference() "(")  FunctionCall()| TableColumn()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ // Might be a call to a parameter-less function.
}void SQLCaseExpression() :{/*@bgen(jjtree) SQLCaseExpression */
  SQLCaseExpression jjtn000 = new SQLCaseExpression(this, JJTSQLCASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLCaseExpression */
  try {
/*@egen*/  "CASE"  (    SQLSimpleExpression()    (      "WHEN" SQLSimpleExpression() "THEN" SQLSimpleExpression()    )*  |    (      "WHEN" SQLExpression() "THEN" SQLSimpleExpression()    )*  )  [ "ELSE" SQLSimpleExpression() ]   "END"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SQLCastExpression() :{/*@bgen(jjtree) SQLCastExpression */
  SQLCastExpression jjtn000 = new SQLCastExpression(this, JJTSQLCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLCastExpression */
  try {
/*@egen*/  "CAST" "(" SQLExpression() "AS" BasicDataTypeDefinition() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IntervalExpression() :{/*@bgen(jjtree) IntervalExpression */
  IntervalExpression jjtn000 = new IntervalExpression(this, JJTINTERVALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IntervalExpression */
  try {
/*@egen*/  ID("INTERVAL") SQLSimpleExpression()  (    LOOKAHEAD({ "DAY".equalsIgnoreCase(getToken(1).image) })    ID("DAY") [ "(" < S_NUMBER > ")" ] "TO" ID("SECOND") [ "(" < S_NUMBER > ")" ]  | ID("YEAR") [ "(" < S_NUMBER > ")" ] "TO" ID("MONTH") [ "(" < S_NUMBER > ")" ]  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionCall() :{/*@bgen(jjtree) FunctionCall */
  FunctionCall jjtn000 = new FunctionCall(this, JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionCall */
  try {
/*@egen*/  FunctionReference()  (    LOOKAHEAD({ "TRIM".equalsIgnoreCase(lastObjectReference) })    TrimArguments()  | LOOKAHEAD({ "EXTRACT".equalsIgnoreCase(lastObjectReference) })    "(" DatetimeField() "FROM" SQLSimpleExpression() ")"  |    [      "("      [        [          "ALL"        | "DISTINCT"        | "UNIQUE"        ]        (          FunctionArgumentList()        | "*"        )      ]      ")"    ]  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  // "all/distinct/unique/*" are permitted only with aggregate functions,
  // but this parser allows their use with any function.
}void FunctionReference() :{/*@bgen(jjtree) FunctionReference */
  FunctionReference jjtn000 = new FunctionReference(this, JJTFUNCTIONREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String name;}{/*@bgen(jjtree) FunctionReference */
  try {
/*@egen*/  name = ObjectReference()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    functions.add(name.toUpperCase());  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionArgumentList() :{/*@bgen(jjtree) FunctionArgumentList */
  FunctionArgumentList jjtn000 = new FunctionArgumentList(this, JJTFUNCTIONARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionArgumentList */
  try {
/*@egen*/  FunctionArgument()  (    "," FunctionArgument()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FunctionArgument() :{/*@bgen(jjtree) FunctionArgument */
  FunctionArgument jjtn000 = new FunctionArgument(this, JJTFUNCTIONARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionArgument */
  try {
/*@egen*/  [    LOOKAHEAD(2)    < S_IDENTIFIER > "=>"  ]  SQLExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TrimArguments() :{/*@bgen(jjtree) TrimArguments */
  TrimArguments jjtn000 = new TrimArguments(this, JJTTRIMARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TrimArguments */
  try {
/*@egen*/  "("  (    LOOKAHEAD({ getToken(1).image.matches("(?i)LEADING|TRAILING|BOTH") })    < S_IDENTIFIER > [ SQLSimpleExpression() ] "FROM" SQLSimpleExpression()  | SQLSimpleExpression() [ "FROM" SQLSimpleExpression() ]  )  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DatetimeField() :{/*@bgen(jjtree) DatetimeField */
  DatetimeField jjtn000 = new DatetimeField(this, JJTDATETIMEFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DatetimeField */
  try {
/*@egen*/  < S_IDENTIFIER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String ObjectReference() :{/*@bgen(jjtree) ObjectReference */
  ObjectReference jjtn000 = new ObjectReference(this, JJTOBJECTREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String s;  StringBuilder name = new StringBuilder();}{/*@bgen(jjtree) ObjectReference */
  try {
/*@egen*/  s = OracleObjectName()  {    name.append(s);  }  [    "." s = OracleObjectName()    {      name.append(".").append(s);    }    [      "." s = OracleObjectName()      {        name.append(".").append(s);      }    ]  ]  [    "@"    (      "!"    | s = TNSName()      {        name.append("@").append(s);      }    )  ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ // remote reference
  // The @! idiom is undocumented, but accepted by Oracle software.
  {    return lastObjectReference = name.toString();  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void OuterJoinExpression() : /**************************/{/*@bgen(jjtree) OuterJoinExpression */
  OuterJoinExpression jjtn000 = new OuterJoinExpression(this, JJTOUTERJOINEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OuterJoinExpression */
  try {
/*@egen*/  TableColumn() "(" "+" ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SubQuery() : /**************************/{/*@bgen(jjtree) SubQuery */
  SubQuery jjtn000 = new SubQuery(this, JJTSUBQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SubQuery */
  try {
/*@egen*/  SelectStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/** Expect an <S_IDENTIFIER> with the given value. */void ID(String id) :{/*@bgen(jjtree) ID */
  ID jjtn000 = new ID(this, JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ID */
  try {
/*@egen*/  < S_IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (!token.image.matches("(?i)"+ id))    {      throw new ParseException("Encountered "+ token.image      + " at line "+ token.beginLine+ ", column "+ token.beginColumn+ "."      + "\nWas expecting: "+ id);    }  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
