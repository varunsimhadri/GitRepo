/* Generated By:JJTree&JavaCC: Do not edit this line. PlSql.java */
package newparser;
import java.io.Reader;
import java.io.FileInputStream;
import java.util.HashSet;
import java.util.Set;
import java.util.Iterator;

@SuppressWarnings("all")
class PlSql/*@bgen(jjtree)*/implements PlSqlTreeConstants, PlSqlConstants {/*@bgen(jjtree)*/
  protected JJTPlSqlState jjtree = new JJTPlSqlState();/** Parse PL/SQL from files.  Each arg is expected to be the name of a file,
        or "-" to indicate System.in.
     */
  public static void main(String args []) throws Throwable
  {
    if (args.length < 1)
    {
      args = new String []
      {
        "-"
      }
      ;
    }
    for (int a = 0;
    a < args.length;
    ++ a)
    {
      final String input = args [a];

      final PlSql parser = new PlSql("-".equals(input) ? System.in : new FileInputStream(input));
      try
      {
        SimpleNode rootNode = parser.CompilationUnit();
        rootNode.dump("t");
      }
      catch (Throwable t)
      {
        System.err.println(input + ":1: not parsed");
        t.printStackTrace();
      }
      Iterator it = parser.tables.iterator();
      System.out.println(it.next() + " tables in " + input);
    }
  }

  public Set < String > functions = new HashSet < String > ();

  public Set < String > procedures = new HashSet < String > ();

  public Set < String > tables = new HashSet < String > ();

  public void reInit(Reader input)
  {
    ReInit(input);
    functions.clear();
    procedures.clear();
    tables.clear();
  }

  private String lastObjectReference = null;

  protected boolean seeTYPE()
  {
    return "TYPE".equalsIgnoreCase(getToken(1).image);
  }

/* Represents a PLSQL code block. */
  final public SimpleNode CompilationUnit() throws ParseException {
 /*@bgen(jjtree) Root */
  Root jjtn000 = new Root(this, JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionDeclaration();
      QueryStatement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void DeclarationSection() throws ParseException {
 /*@bgen(jjtree) DeclarationSection */
  DeclarationSection jjtn000 = new DeclarationSection(this, JJTDECLARATIONSECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DECLARE);
      Declarations();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Declarations() throws ParseException {
 /*@bgen(jjtree) Declarations */
  Declarations jjtn000 = new Declarations(this, JJTDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        if (seeTYPE()) {
          ID("TYPE");
          jj_consume_token(S_IDENTIFIER);
          jj_consume_token(K_IS);
          TypeDefinition();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_CURSOR:
            CursorDeclaration();
            break;
          case S_IDENTIFIER:
            IdentifierDeclaration();
            break;
          default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(152);
        if (jj_2_1(1)) {
          ;
        } else {
          break label_1;
        }
      }
      label_2:
      while (true) {
        if (!seeTYPE()) {
          ;
        } else {
          break label_2;
        }
        FunctionDeclaration();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IdentifierDeclaration() throws ParseException {
 /*@bgen(jjtree) IdentifierDeclaration */
  IdentifierDeclaration jjtn000 = new IdentifierDeclaration(this, JJTIDENTIFIERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CONSTANT:
        ConstantDeclaration();
        break;
      case K_BINARY_INTEGER:
      case K_BOOLEAN:
      case K_CHAR:
      case K_DATE:
      case K_FLOAT:
      case K_INTEGER:
      case K_NATURAL:
      case K_NUMBER:
      case K_REAL:
      case K_TABLE:
      case K_VARCHAR2:
      case K_VARCHAR:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        VariableDeclaration();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CursorDeclaration() throws ParseException {
 /*@bgen(jjtree) CursorDeclaration */
  CursorDeclaration jjtn000 = new CursorDeclaration(this, JJTCURSORDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CURSOR);
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 153:
        jj_consume_token(153);
        ParameterList();
        jj_consume_token(154);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(K_IS);
      SelectStatement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionDeclaration() throws ParseException {
 /*@bgen(jjtree) FunctionDeclaration */
  FunctionDeclaration jjtn000 = new FunctionDeclaration(this, JJTFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CREATE);
      jj_consume_token(K_FUNCTION);
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 153:
        jj_consume_token(153);
        ParameterList();
        jj_consume_token(154);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(K_RETURNS);
      RemFunc();
      jj_consume_token(152);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RemFunc() throws ParseException {
 /*@bgen(jjtree) RemFunc */
  RemFunc jjtn000 = new RemFunc(this, JJTREMFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_RETURNS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_BINARY_INTEGER:
      case K_BOOLEAN:
      case K_CHAR:
      case K_DATE:
      case K_FLOAT:
      case K_INTEGER:
      case K_NATURAL:
      case K_NUMBER:
      case K_REAL:
      case K_VARCHAR2:
      case K_VARCHAR:
        BasicDataTypeDefinition();
        Option();
        ScalarFuncBody();
        break;
      case K_TABLE:
        jj_consume_token(K_TABLE);
        Option();
        InlineTVBody();
        break;
      case S_IDENTIFIER:
        jj_consume_token(S_IDENTIFIER);
        jj_consume_token(K_TABLE);
        TableTypeDef();
        Option();
        MultiTVBody();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TableTypeDef() throws ParseException {
 /*@bgen(jjtree) TableTypeDef */
  TableTypeDef jjtn000 = new TableTypeDef(this, JJTTABLETYPEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ColumnDefinition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case 155:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NULL:
          jj_consume_token(K_NULL);
          break;
        case 155:
          jj_consume_token(155);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_UNIQUE:
      case 156:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 156:
          jj_consume_token(156);
          break;
        case K_UNIQUE:
          jj_consume_token(K_UNIQUE);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ColumnDefinition() throws ParseException {
 /*@bgen(jjtree) ColumnDefinition */
  ColumnDefinition jjtn000 = new ColumnDefinition(this, JJTCOLUMNDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        ColumnName();
        BasicDataTypeDefinition();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BindVariable() throws ParseException {
 /*@bgen(jjtree) BindVariable */
  BindVariable jjtn000 = new BindVariable(this, JJTBINDVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_BIND:
        jj_consume_token(S_BIND);
        break;
      case 157:
        jj_consume_token(157);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_NUMBER:
          jj_consume_token(S_NUMBER);
          break;
        case S_IDENTIFIER:
          jj_consume_token(S_IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 158:
            jj_consume_token(158);
            jj_consume_token(S_IDENTIFIER);
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Option() throws ParseException {
 /*@bgen(jjtree) Option */
  Option jjtn000 = new Option(this, JJTOPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ScalarFuncBody() throws ParseException {
 /*@bgen(jjtree) ScalarFuncBody */
  ScalarFuncBody jjtn000 = new ScalarFuncBody(this, JJTSCALARFUNCBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BEGIN);
      SequenceOfStatements();
      jj_consume_token(K_RETURN);
      SQLSimpleExpression();
      jj_consume_token(K_END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InlineTVBody() throws ParseException {
 /*@bgen(jjtree) InlineTVBody */
  InlineTVBody jjtn000 = new InlineTVBody(this, JJTINLINETVBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_RETURN);
      SelectStatement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MultiTVBody() throws ParseException {
 /*@bgen(jjtree) MultiTVBody */
  MultiTVBody jjtn000 = new MultiTVBody(this, JJTMULTITVBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BEGIN);
      SequenceOfStatements();
      jj_consume_token(K_RETURN);
      jj_consume_token(K_END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableDeclaration() throws ParseException {
 /*@bgen(jjtree) VariableDeclaration */
  VariableDeclaration jjtn000 = new VariableDeclaration(this, JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TypeDefinition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
        jj_consume_token(K_NULL);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
      case 159:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 159:
          jj_consume_token(159);
          break;
        case K_DEFAULT:
          jj_consume_token(K_DEFAULT);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PlSqlExpression();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConstantDeclaration() throws ParseException {
 /*@bgen(jjtree) ConstantDeclaration */
  ConstantDeclaration jjtn000 = new ConstantDeclaration(this, JJTCONSTANTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CONSTANT);
      TypeDefinition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
        jj_consume_token(K_NULL);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 159:
        jj_consume_token(159);
        break;
      case K_DEFAULT:
        jj_consume_token(K_DEFAULT);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PlSqlExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TypeDefinition() throws ParseException {
 /*@bgen(jjtree) TypeDefinition */
  TypeDefinition jjtn000 = new TypeDefinition(this, JJTTYPEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_BINARY_INTEGER:
      case K_BOOLEAN:
      case K_CHAR:
      case K_DATE:
      case K_FLOAT:
      case K_INTEGER:
      case K_NATURAL:
      case K_NUMBER:
      case K_REAL:
      case K_VARCHAR2:
      case K_VARCHAR:
        BasicDataTypeDefinition();
        break;
      case K_TABLE:
        jj_consume_token(K_TABLE);
        jj_consume_token(K_OF);
        TypeDefinition();
        if (jj_2_2(2)) {
          jj_consume_token(K_INDEX);
          jj_consume_token(K_BY);
          BasicDataTypeDefinition();
        } else {
          ;
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        if (jj_2_3(2)) {
          jj_consume_token(S_IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 160:
            jj_consume_token(160);
            break;
          case 161:
            jj_consume_token(161);
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else if (jj_2_4(2147483647)) {
          TableColumn();
          jj_consume_token(160);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S_IDENTIFIER:
            jj_consume_token(S_IDENTIFIER);
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BasicDataTypeDefinition() throws ParseException {
 /*@bgen(jjtree) BasicDataTypeDefinition */
  BasicDataTypeDefinition jjtn000 = new BasicDataTypeDefinition(this, JJTBASICDATATYPEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHAR:
      case K_FLOAT:
      case K_INTEGER:
      case K_NATURAL:
      case K_NUMBER:
      case K_REAL:
      case K_VARCHAR2:
      case K_VARCHAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CHAR:
          jj_consume_token(K_CHAR);
          break;
        case K_VARCHAR:
          jj_consume_token(K_VARCHAR);
          break;
        case K_VARCHAR2:
          jj_consume_token(K_VARCHAR2);
          break;
        case K_INTEGER:
          jj_consume_token(K_INTEGER);
          break;
        case K_NUMBER:
          jj_consume_token(K_NUMBER);
          break;
        case K_NATURAL:
          jj_consume_token(K_NATURAL);
          break;
        case K_REAL:
          jj_consume_token(K_REAL);
          break;
        case K_FLOAT:
          jj_consume_token(K_FLOAT);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 153:
          jj_consume_token(153);
          jj_consume_token(S_NUMBER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 162:
            jj_consume_token(162);
            jj_consume_token(S_NUMBER);
            break;
          default:
            jj_la1[23] = jj_gen;
            ;
          }
          jj_consume_token(154);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        break;
      case K_DATE:
        jj_consume_token(K_DATE);
        break;
      case K_BINARY_INTEGER:
        jj_consume_token(K_BINARY_INTEGER);
        break;
      case K_BOOLEAN:
        jj_consume_token(K_BOOLEAN);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* ---------------- DECLARATIONS SECTION ends here ------------------ */
/* ---------------- Code Section starts here ---------------------- */
  final public void BeginEndBlock() throws ParseException {
 /*@bgen(jjtree) BeginEndBlock */
  BeginEndBlock jjtn000 = new BeginEndBlock(this, JJTBEGINENDBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BEGIN);
      SequenceOfStatements();
      jj_consume_token(K_END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(152);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SequenceOfStatements() throws ParseException {
 /*@bgen(jjtree) SequenceOfStatements */
  SequenceOfStatements jjtn000 = new SequenceOfStatements(this, JJTSEQUENCEOFSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        PLSQLStatement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_BEGIN:
        case K_CLOSE:
        case K_DECLARE:
        case K_DELETE:
        case K_FOR:
        case K_FORALL:
        case K_GOTO:
        case K_IF:
        case K_INSERT:
        case K_LOOP:
        case K_MERGE:
        case K_NULL:
        case K_OPEN:
        case K_SAVEPOINT:
        case K_SELECT:
        case K_UPDATE:
        case K_WHILE:
        case S_IDENTIFIER:
        case S_BIND:
        case 153:
        case 157:
        case 163:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_4;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PLSQLStatement() throws ParseException {
 /*@bgen(jjtree) PLSQLStatement */
  PLSQLStatement jjtn000 = new PLSQLStatement(this, JJTPLSQLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_GOTO:
        GotoStatement();
        break;
      case K_IF:
        IfStatement();
        break;
      case 163:
        LabelDeclaration();
        break;
      case K_FOR:
      case K_LOOP:
      case K_WHILE:
        LoopStatement();
        break;
      case K_NULL:
        NullStatement();
        break;
      case K_FORALL:
        ForallStatement();
        break;
      case K_CLOSE:
      case K_DELETE:
      case K_INSERT:
      case K_MERGE:
      case K_OPEN:
      case K_SAVEPOINT:
      case K_SELECT:
      case K_UPDATE:
      case 153:
        SQLStatement();
        break;
      case K_BEGIN:
      case K_DECLARE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DECLARE:
          DeclarationSection();
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        BeginEndBlock();
        break;
      default:
        jj_la1[29] = jj_gen;
        if (jj_2_5(2147483647)) {
          AssignmentStatement();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LabelDeclaration() throws ParseException {
 /*@bgen(jjtree) LabelDeclaration */
  LabelDeclaration jjtn000 = new LabelDeclaration(this, JJTLABELDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(163);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(164);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForallStatement() throws ParseException {
 /*@bgen(jjtree) ForallStatement */
  ForallStatement jjtn000 = new ForallStatement(this, JJTFORALLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FORALL);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_IN);
      PlSqlSimpleExpression();
      jj_consume_token(165);
      PlSqlSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INSERT:
        InsertStatement();
        break;
      case K_UPDATE:
        UpdateStatement();
        break;
      case K_DELETE:
        DeleteStatement();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLStatement() throws ParseException {
 /*@bgen(jjtree) SQLStatement */
  SQLStatement jjtn000 = new SQLStatement(this, JJTSQLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CLOSE:
        CloseStatement();
        break;
      case K_DELETE:
        DeleteStatement();
        break;
      case K_INSERT:
        InsertStatement();
        break;
      case K_OPEN:
        OpenStatement();
        break;
      case K_SAVEPOINT:
        SavepointStatement();
        break;
      case K_SELECT:
      case 153:
        QueryStatement();
        break;
      case K_UPDATE:
        UpdateStatement();
        break;
      case K_MERGE:
        MergeStatement();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AssignmentStatement() throws ParseException {
 /*@bgen(jjtree) AssignmentStatement */
  AssignmentStatement jjtn000 = new AssignmentStatement(this, JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DataItem();
      jj_consume_token(159);
      PlSqlExpression();
      jj_consume_token(152);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void GotoStatement() throws ParseException {
 /*@bgen(jjtree) GotoStatement */
  GotoStatement jjtn000 = new GotoStatement(this, JJTGOTOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_GOTO);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(152);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  IfStatement jjtn000 = new IfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_IF);
      PlSqlExpression();
      jj_consume_token(K_THEN);
      SequenceOfStatements();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ELSIF:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_5;
        }
        jj_consume_token(K_ELSIF);
        PlSqlExpression();
        jj_consume_token(K_THEN);
        SequenceOfStatements();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ELSE:
        jj_consume_token(K_ELSE);
        SequenceOfStatements();
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      jj_consume_token(K_END);
      jj_consume_token(K_IF);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(152);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LoopStatement() throws ParseException {
 /*@bgen(jjtree) LoopStatement */
  LoopStatement jjtn000 = new LoopStatement(this, JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_LOOP:
        NormalLoop();
        break;
      case K_WHILE:
        WhileLoop();
        break;
      case K_FOR:
        ForLoop();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NormalLoop() throws ParseException {
 /*@bgen(jjtree) NormalLoop */
  NormalLoop jjtn000 = new NormalLoop(this, JJTNORMALLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_LOOP);
      SequenceOfStatements();
      jj_consume_token(K_END);
      jj_consume_token(K_LOOP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(152);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhileLoop() throws ParseException {
 /*@bgen(jjtree) WhileLoop */
  WhileLoop jjtn000 = new WhileLoop(this, JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_WHILE);
      PlSqlExpression();
      NormalLoop();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForLoop() throws ParseException {
 /*@bgen(jjtree) ForLoop */
  ForLoop jjtn000 = new ForLoop(this, JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_6(2147483647)) {
        NumericForLoop();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_FOR:
          CursorForLoop();
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NumericForLoopLookahead() throws ParseException {
 /*@bgen(jjtree) NumericForLoopLookahead */
  NumericForLoopLookahead jjtn000 = new NumericForLoopLookahead(this, JJTNUMERICFORLOOPLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FOR);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_IN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_REVERSE:
        jj_consume_token(K_REVERSE);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      PlSqlSimpleExpression();
      jj_consume_token(165);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NumericForLoop() throws ParseException {
 /*@bgen(jjtree) NumericForLoop */
  NumericForLoop jjtn000 = new NumericForLoop(this, JJTNUMERICFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FOR);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_IN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_REVERSE:
        jj_consume_token(K_REVERSE);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      PlSqlSimpleExpression();
      jj_consume_token(165);
      PlSqlSimpleExpression();
      NormalLoop();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CursorForLoop() throws ParseException {
 /*@bgen(jjtree) CursorForLoop */
  CursorForLoop jjtn000 = new CursorForLoop(this, JJTCURSORFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FOR);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_IN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        CursorReference();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 153:
          jj_consume_token(153);
          Arguments();
          jj_consume_token(154);
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        break;
      case 153:
        jj_consume_token(153);
        SelectStatement();
        jj_consume_token(154);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      NormalLoop();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CursorReference() throws ParseException {
 /*@bgen(jjtree) CursorReference */
  CursorReference jjtn000 = new CursorReference(this, JJTCURSORREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjectReference();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NullStatement() throws ParseException {
 /*@bgen(jjtree) NullStatement */
  NullStatement jjtn000 = new NullStatement(this, JJTNULLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_NULL);
      jj_consume_token(152);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CloseStatement() throws ParseException {
 /*@bgen(jjtree) CloseStatement */
  CloseStatement jjtn000 = new CloseStatement(this, JJTCLOSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CLOSE);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(152);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OpenStatement() throws ParseException {
 /*@bgen(jjtree) OpenStatement */
  OpenStatement jjtn000 = new OpenStatement(this, JJTOPENSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_OPEN);
      CursorReference();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 153:
        jj_consume_token(153);
        Arguments();
        jj_consume_token(154);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      jj_consume_token(152);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SavepointStatement() throws ParseException {
 /*@bgen(jjtree) SavepointStatement */
  SavepointStatement jjtn000 = new SavepointStatement(this, JJTSAVEPOINTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SAVEPOINT);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(152);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UpdateStatement() throws ParseException {
 /*@bgen(jjtree) UpdateStatement */
  UpdateStatement jjtn000 = new UpdateStatement(this, JJTUPDATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_UPDATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        TableName();
        break;
      case 153:
        jj_consume_token(153);
        SubQuery();
        jj_consume_token(154);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        OracleObjectName();
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      jj_consume_token(K_SET);
      ColumnValues();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        jj_consume_token(K_WHERE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CASE:
        case K_CAST:
        case K_EXISTS:
        case K_NOT:
        case K_NULL:
        case K_PRIOR:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 153:
        case 157:
        case 167:
        case 168:
          SQLExpression();
          break;
        case K_CURRENT:
          jj_consume_token(K_CURRENT);
          jj_consume_token(K_OF);
          jj_consume_token(S_IDENTIFIER);
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_RETURNING:
        ReturningClause();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(152);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ReturningClause() throws ParseException {
 /*@bgen(jjtree) ReturningClause */
  ReturningClause jjtn000 = new ReturningClause(this, JJTRETURNINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_RETURNING);
      SQLExpression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 162:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_6;
        }
        jj_consume_token(162);
        SQLExpression();
      }
      IntoClause();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ColumnValues() throws ParseException {
 /*@bgen(jjtree) ColumnValues */
  ColumnValues jjtn000 = new ColumnValues(this, JJTCOLUMNVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        ColumnValue();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 162:
            ;
            break;
          default:
            jj_la1[49] = jj_gen;
            break label_7;
          }
          jj_consume_token(162);
          ColumnValue();
        }
        break;
      case 153:
        jj_consume_token(153);
        TableColumn();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 162:
            ;
            break;
          default:
            jj_la1[50] = jj_gen;
            break label_8;
          }
          jj_consume_token(162);
          TableColumn();
        }
        jj_consume_token(154);
        jj_consume_token(166);
        jj_consume_token(153);
        SelectStatement();
        jj_consume_token(154);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ColumnValue() throws ParseException {
 /*@bgen(jjtree) ColumnValue */
  ColumnValue jjtn000 = new ColumnValue(this, JJTCOLUMNVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TableColumn();
      jj_consume_token(166);
      PlSqlExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InsertStatement() throws ParseException {
 /*@bgen(jjtree) InsertStatement */
  InsertStatement jjtn000 = new InsertStatement(this, JJTINSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_INSERT);
      jj_consume_token(K_INTO);
      TableName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        OracleObjectName();
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      if (jj_2_7(2)) {
        jj_consume_token(153);
        TableColumn();
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 162:
            ;
            break;
          default:
            jj_la1[53] = jj_gen;
            break label_9;
          }
          jj_consume_token(162);
          TableColumn();
        }
        jj_consume_token(154);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_VALUES:
        jj_consume_token(K_VALUES);
        jj_consume_token(153);
        PlSqlExpressionList();
        jj_consume_token(154);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_RETURNING:
          ReturningClause();
          break;
        default:
          jj_la1[54] = jj_gen;
          ;
        }
        break;
      case K_SELECT:
      case 153:
        SubQuery();
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(152);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MergeStatement() throws ParseException {
 /*@bgen(jjtree) MergeStatement */
  MergeStatement jjtn000 = new MergeStatement(this, JJTMERGESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_MERGE);
      jj_consume_token(K_INTO);
      TableReference();
      jj_consume_token(K_USING);
      TableReference();
      jj_consume_token(K_ON);
      jj_consume_token(153);
      SQLExpression();
      jj_consume_token(154);
      jj_consume_token(K_WHEN);
      ID("MATCHED");
      jj_consume_token(K_THEN);
      jj_consume_token(K_UPDATE);
      jj_consume_token(K_SET);
      MergeSetColumn();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 162:
          ;
          break;
        default:
          jj_la1[56] = jj_gen;
          break label_10;
        }
        jj_consume_token(162);
        MergeSetColumn();
      }
      jj_consume_token(K_WHEN);
      jj_consume_token(K_NOT);
      ID("MATCHED");
      jj_consume_token(K_THEN);
      jj_consume_token(K_INSERT);
      jj_consume_token(153);
      TableColumn();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 162:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_11;
        }
        jj_consume_token(162);
        TableColumn();
      }
      jj_consume_token(154);
      jj_consume_token(K_VALUES);
      jj_consume_token(153);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
        jj_consume_token(K_DEFAULT);
        break;
      case K_CASE:
      case K_CAST:
      case K_EXISTS:
      case K_NOT:
      case K_NULL:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 153:
      case 157:
      case 167:
      case 168:
        SQLExpressionList();
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(154);
      jj_consume_token(152);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MergeSetColumn() throws ParseException {
 /*@bgen(jjtree) MergeSetColumn */
  MergeSetColumn jjtn000 = new MergeSetColumn(this, JJTMERGESETCOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TableColumn();
      jj_consume_token(166);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
        jj_consume_token(K_DEFAULT);
        break;
      case K_CASE:
      case K_CAST:
      case K_EXISTS:
      case K_NOT:
      case K_NULL:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 153:
      case 157:
      case 167:
      case 168:
        SQLExpression();
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DeleteStatement() throws ParseException {
 /*@bgen(jjtree) DeleteStatement */
  DeleteStatement jjtn000 = new DeleteStatement(this, JJTDELETESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DELETE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_FROM:
        jj_consume_token(K_FROM);
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      TableName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        OracleObjectName();
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        jj_consume_token(K_WHERE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CASE:
        case K_CAST:
        case K_EXISTS:
        case K_NOT:
        case K_NULL:
        case K_PRIOR:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 153:
        case 157:
        case 167:
        case 168:
          SQLExpression();
          break;
        case K_CURRENT:
          jj_consume_token(K_CURRENT);
          jj_consume_token(K_OF);
          jj_consume_token(S_IDENTIFIER);
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      jj_consume_token(152);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void QueryStatement() throws ParseException {
 /*@bgen(jjtree) QueryStatement */
  QueryStatement jjtn000 = new QueryStatement(this, JJTQUERYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectStatement();
      jj_consume_token(152);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// PLSQL Expression and it's childs
  final public void PlSqlExpression() throws ParseException {
 /*@bgen(jjtree) PlSqlExpression */
  PlSqlExpression jjtn000 = new PlSqlExpression(this, JJTPLSQLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlAndExpression();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OR:
          ;
          break;
        default:
          jj_la1[64] = jj_gen;
          break label_12;
        }
        jj_consume_token(K_OR);
        PlSqlAndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlSqlAndExpression() throws ParseException {
 /*@bgen(jjtree) PlSqlAndExpression */
  PlSqlAndExpression jjtn000 = new PlSqlAndExpression(this, JJTPLSQLANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlUnaryLogicalExpression();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AND:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_13;
        }
        jj_consume_token(K_AND);
        PlSqlUnaryLogicalExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlSqlUnaryLogicalExpression() throws ParseException {
 /*@bgen(jjtree) PlSqlUnaryLogicalExpression */
  PlSqlUnaryLogicalExpression jjtn000 = new PlSqlUnaryLogicalExpression(this, JJTPLSQLUNARYLOGICALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      PlSqlRelationalExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlSqlRelationalExpression() throws ParseException {
 /*@bgen(jjtree) PlSqlRelationalExpression */
  PlSqlRelationalExpression jjtn000 = new PlSqlRelationalExpression(this, JJTPLSQLRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_BETWEEN:
      case K_IN:
      case K_IS:
      case K_LIKE:
      case K_NOT:
      case 166:
      case 174:
      case 175:
      case 176:
      case 177:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 166:
        case 174:
        case 175:
        case 176:
        case 177:
          Relop();
          PlSqlSimpleExpression();
          break;
        default:
          jj_la1[67] = jj_gen;
          if (jj_2_8(2)) {
            PlSqlInClause();
          } else if (jj_2_9(2)) {
            PlSqlBetweenClause();
          } else if (jj_2_10(2)) {
            PlSqlLikeClause();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_IS:
              IsNullClause();
              break;
            default:
              jj_la1[68] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlSqlExpressionList() throws ParseException {
 /*@bgen(jjtree) PlSqlExpressionList */
  PlSqlExpressionList jjtn000 = new PlSqlExpressionList(this, JJTPLSQLEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlExpression();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 162:
          ;
          break;
        default:
          jj_la1[70] = jj_gen;
          break label_14;
        }
        jj_consume_token(162);
        PlSqlExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlSqlInClause() throws ParseException {
 /*@bgen(jjtree) PlSqlInClause */
  PlSqlInClause jjtn000 = new PlSqlInClause(this, JJTPLSQLINCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      jj_consume_token(K_IN);
      jj_consume_token(153);
      PlSqlExpressionList();
      jj_consume_token(154);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlSqlBetweenClause() throws ParseException {
 /*@bgen(jjtree) PlSqlBetweenClause */
  PlSqlBetweenClause jjtn000 = new PlSqlBetweenClause(this, JJTPLSQLBETWEENCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      jj_consume_token(K_BETWEEN);
      PlSqlSimpleExpression();
      jj_consume_token(K_AND);
      PlSqlSimpleExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlSqlLikeClause() throws ParseException {
 /*@bgen(jjtree) PlSqlLikeClause */
  PlSqlLikeClause jjtn000 = new PlSqlLikeClause(this, JJTPLSQLLIKECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      jj_consume_token(K_LIKE);
      PlSqlSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ESCAPE:
        jj_consume_token(K_ESCAPE);
        PlSqlSimpleExpression();
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IsNullClause() throws ParseException {
 /*@bgen(jjtree) IsNullClause */
  IsNullClause jjtn000 = new IsNullClause(this, JJTISNULLCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_IS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      jj_consume_token(K_NULL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlSqlSimpleExpression() throws ParseException {
 /*@bgen(jjtree) PlSqlSimpleExpression */
  PlSqlSimpleExpression jjtn000 = new PlSqlSimpleExpression(this, JJTPLSQLSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlMultiplicativeExpression();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 167:
        case 168:
        case 169:
          ;
          break;
        default:
          jj_la1[76] = jj_gen;
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 167:
          jj_consume_token(167);
          break;
        case 168:
          jj_consume_token(168);
          break;
        case 169:
          jj_consume_token(169);
          break;
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PlSqlMultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlSqlMultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) PlSqlMultiplicativeExpression */
  PlSqlMultiplicativeExpression jjtn000 = new PlSqlMultiplicativeExpression(this, JJTPLSQLMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlExponentExpression();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
        case 170:
        case 171:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_16;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 170:
          jj_consume_token(170);
          break;
        case 171:
          jj_consume_token(171);
          break;
        case S_IDENTIFIER:
          ID("MOD");
          break;
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PlSqlExponentExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlSqlExponentExpression() throws ParseException {
 /*@bgen(jjtree) PlSqlExponentExpression */
  PlSqlExponentExpression jjtn000 = new PlSqlExponentExpression(this, JJTPLSQLEXPONENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PlSqlUnaryExpression();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 172:
          ;
          break;
        default:
          jj_la1[80] = jj_gen;
          break label_17;
        }
        jj_consume_token(172);
        PlSqlUnaryExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlSqlUnaryExpression() throws ParseException {
 /*@bgen(jjtree) PlSqlUnaryExpression */
  PlSqlUnaryExpression jjtn000 = new PlSqlUnaryExpression(this, JJTPLSQLUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 167:
      case 168:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 167:
          jj_consume_token(167);
          break;
        case 168:
          jj_consume_token(168);
          break;
        default:
          jj_la1[81] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PlSqlPrimaryExpression();
        break;
      case K_CASE:
      case K_CAST:
      case K_NULL:
      case K_SQL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 153:
      case 157:
        PlSqlPrimaryExpression();
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlSqlPrimaryExpression() throws ParseException {
 /*@bgen(jjtree) PlSqlPrimaryExpression */
  PlSqlPrimaryExpression jjtn000 = new PlSqlPrimaryExpression(this, JJTPLSQLPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_NUMBER:
        jj_consume_token(S_NUMBER);
        break;
      case S_CHAR_LITERAL:
        jj_consume_token(S_CHAR_LITERAL);
        break;
      case K_NULL:
        jj_consume_token(K_NULL);
        break;
      case K_CASE:
        SQLCaseExpression();
        break;
      case 153:
        jj_consume_token(153);
        if (jj_2_11(3)) {
          SelectStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_CASE:
          case K_CAST:
          case K_NOT:
          case K_NULL:
          case K_SQL:
          case S_NUMBER:
          case S_IDENTIFIER:
          case S_BIND:
          case S_CHAR_LITERAL:
          case S_QUOTED_IDENTIFIER:
          case 153:
          case 157:
          case 167:
          case 168:
            PlSqlExpression();
            break;
          default:
            jj_la1[83] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(154);
        break;
      case S_BIND:
      case 157:
        BindVariable();
        break;
      default:
        jj_la1[85] = jj_gen;
        if (jj_2_12(2)) {
          SQLCastExpression();
        } else if (jj_2_13(2147483647)) {
          IntervalExpression();
        } else if (jj_2_14(2)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S_IDENTIFIER:
            jj_consume_token(S_IDENTIFIER);
            break;
          case K_SQL:
            jj_consume_token(K_SQL);
            break;
          default:
            jj_la1[84] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(173);
          ID("FOUND|NOTFOUND|ISOPEN|ROWCOUNT");
        } else if (jj_2_15(2147483647)) {
          FunctionCall();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S_IDENTIFIER:
          case S_QUOTED_IDENTIFIER:
            ObjectReference();
            break;
          default:
            jj_la1[86] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* ----------------------- PLSQL Code Block Ends here -------------- */
/* ---------------- General Productions --------------------- */
  final public void TableColumn() throws ParseException {
 /*@bgen(jjtree) TableColumn */
  TableColumn jjtn000 = new TableColumn(this, JJTTABLECOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjectReference();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String OracleObjectName() throws ParseException {
 /*@bgen(jjtree) OracleObjectName */
  OracleObjectName jjtn000 = new OracleObjectName(this, JJTORACLEOBJECTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return token.image;}
        break;
      case S_QUOTED_IDENTIFIER:
        jj_consume_token(S_QUOTED_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    String s = token.image;
    {if (true) return s.substring(1, s.length() - 1);}
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String TNSName() throws ParseException {
 /*@bgen(jjtree) TNSName */
  TNSName jjtn000 = new TNSName(this, JJTTNSNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);StringBuilder name = new StringBuilder();
    try {
      jj_consume_token(S_IDENTIFIER);
    name.append(token.image);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 158:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_18;
        }
        jj_consume_token(158);
        jj_consume_token(S_IDENTIFIER);
      name.append(".").append(token.image);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return name.toString();}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Relop() throws ParseException {
 /*@bgen(jjtree) Relop */
  Relop jjtn000 = new Relop(this, JJTRELOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 166:
        jj_consume_token(166);
        break;
      case 174:
        jj_consume_token(174);
        jj_consume_token(166);
        break;
      case 175:
        jj_consume_token(175);
        break;
      default:
        jj_la1[89] = jj_gen;
        if (jj_2_16(2)) {
          jj_consume_token(176);
          jj_consume_token(166);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 176:
            jj_consume_token(176);
            break;
          default:
            jj_la1[90] = jj_gen;
            if (jj_2_17(2)) {
              jj_consume_token(177);
              jj_consume_token(176);
            } else if (jj_2_18(2)) {
              jj_consume_token(177);
              jj_consume_token(166);
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 177:
                jj_consume_token(177);
                break;
              default:
                jj_la1[91] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TableName() throws ParseException {
 /*@bgen(jjtree) TableName */
  TableName jjtn000 = new TableName(this, JJTTABLENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s;
  StringBuilder name = new StringBuilder();
    try {
      // schema.table@link
        s = OracleObjectName();
    name.append(s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 158:
        jj_consume_token(158);
        s = OracleObjectName();
      name.append(".").append(s);
        break;
      default:
        jj_la1[92] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 178:
        jj_consume_token(178);
        s = TNSName();
      name.append("@").append(s);
        break;
      default:
        jj_la1[93] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    tables.add(name.toString().toUpperCase());
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ParameterList() throws ParseException {
 /*@bgen(jjtree) ParameterList */
  ParameterList jjtn000 = new ParameterList(this, JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Parameter();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 162:
          ;
          break;
        default:
          jj_la1[94] = jj_gen;
          break label_19;
        }
        jj_consume_token(162);
        Parameter();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NumOrID() throws ParseException {
 /*@bgen(jjtree) NumOrID */
  NumOrID jjtn000 = new NumOrID(this, JJTNUMORID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        jj_consume_token(S_IDENTIFIER);
        break;
      case S_NUMBER:
      case 167:
      case 168:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 167:
        case 168:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 167:
            jj_consume_token(167);
            break;
          case 168:
            jj_consume_token(168);
            break;
          default:
            jj_la1[95] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[96] = jj_gen;
          ;
        }
        jj_consume_token(S_NUMBER);
        break;
      default:
        jj_la1[97] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Parameter() throws ParseException {
 /*@bgen(jjtree) Parameter */
  Parameter jjtn000 = new Parameter(this, JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_BINARY_INTEGER:
      case K_BOOLEAN:
      case K_CHAR:
      case K_DATE:
      case K_FLOAT:
      case K_IN:
      case K_INTEGER:
      case K_NATURAL:
      case K_NUMBER:
      case K_OUT:
      case K_REAL:
      case K_TABLE:
      case K_VARCHAR2:
      case K_VARCHAR:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_IN:
          jj_consume_token(K_IN);
          break;
        default:
          jj_la1[98] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OUT:
          jj_consume_token(K_OUT);
          break;
        default:
          jj_la1[99] = jj_gen;
          ;
        }
        TypeDefinition();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DEFAULT:
        case 159:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 159:
            jj_consume_token(159);
            break;
          case K_DEFAULT:
            jj_consume_token(K_DEFAULT);
            break;
          default:
            jj_la1[100] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          PlSqlExpression();
          break;
        default:
          jj_la1[101] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Arguments() throws ParseException {
 /*@bgen(jjtree) Arguments */
  Arguments jjtn000 = new Arguments(this, JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Argument();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 162:
          ;
          break;
        default:
          jj_la1[103] = jj_gen;
          break label_20;
        }
        jj_consume_token(162);
        Argument();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Argument() throws ParseException {
 /*@bgen(jjtree) Argument */
  Argument jjtn000 = new Argument(this, JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_19(2)) {
        jj_consume_token(S_IDENTIFIER);
        jj_consume_token(179);
      } else {
        ;
      }
      PlSqlExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* --------------- General Productions ends here --------------- */
/* ----------- SQL productions start here ----------------- */
  final public void SelectStatement() throws ParseException {
 /*@bgen(jjtree) SelectStatement */
  SelectStatement jjtn000 = new SelectStatement(this, JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectWithoutOrder();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ORDER:
        OrderByClause();
        break;
      default:
        jj_la1[104] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_FOR:
        ForUpdateClause();
        break;
      default:
        jj_la1[105] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SKIP:
        jj_consume_token(K_SKIP);
        ID("LOCKED");
        break;
      default:
        jj_la1[106] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SelectWithoutOrder() throws ParseException {
 /*@bgen(jjtree) SelectWithoutOrder */
  SelectWithoutOrder jjtn000 = new SelectWithoutOrder(this, JJTSELECTWITHOUTORDER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectSet();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_INTERSECT:
        case K_MINUS:
        case K_UNION:
          ;
          break;
        default:
          jj_la1[107] = jj_gen;
          break label_21;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_UNION:
          jj_consume_token(K_UNION);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ALL:
            jj_consume_token(K_ALL);
            break;
          default:
            jj_la1[108] = jj_gen;
            ;
          }
          break;
        case K_INTERSECT:
          jj_consume_token(K_INTERSECT);
          break;
        case K_MINUS:
          jj_consume_token(K_MINUS);
          break;
        default:
          jj_la1[109] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        SelectSet();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SelectSet() throws ParseException {
 /*@bgen(jjtree) SelectSet */
  SelectSet jjtn000 = new SelectSet(this, JJTSELECTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SELECT:
        Select();
        break;
      case 153:
        jj_consume_token(153);
        SubQuery();
        jj_consume_token(154);
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Select() throws ParseException {
 /*@bgen(jjtree) Select */
  Select jjtn000 = new Select(this, JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
      case K_UNIQUE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
          break;
        case K_UNIQUE:
          jj_consume_token(K_UNIQUE);
          break;
        default:
          jj_la1[111] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[112] = jj_gen;
        ;
      }
      SelectList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INTO:
        IntoClause();
        break;
      default:
        jj_la1[113] = jj_gen;
        ;
      }
      FromClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        WhereClause();
        break;
      default:
        jj_la1[114] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_GROUP:
      case K_HAVING:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_HAVING:
          HavingClause();
          GroupByClause();
          break;
        case K_GROUP:
          GroupByClause();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_HAVING:
            HavingClause();
            break;
          default:
            jj_la1[115] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[116] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[117] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Checks for whatever follows  SELECT */
  final public void SelectList() throws ParseException {
 /*@bgen(jjtree) SelectList */
  SelectList jjtn000 = new SelectList(this, JJTSELECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 170:
        jj_consume_token(170);
        break;
      case K_CASE:
      case K_CAST:
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 153:
      case 157:
      case 167:
      case 168:
        SelectItem();
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 162:
            ;
            break;
          default:
            jj_la1[118] = jj_gen;
            break label_22;
          }
          jj_consume_token(162);
          SelectItem();
        }
        break;
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SelectItem() throws ParseException {
 /*@bgen(jjtree) SelectItem */
  SelectItem jjtn000 = new SelectItem(this, JJTSELECTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_20(2)) {
        OracleObjectName();
        jj_consume_token(180);
      } else if (jj_2_21(4)) {
        OracleObjectName();
        jj_consume_token(158);
        OracleObjectName();
        jj_consume_token(180);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CASE:
        case K_CAST:
        case K_NULL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 153:
        case 157:
        case 167:
        case 168:
          SQLSimpleExpression();
          break;
        default:
          jj_la1[120] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
      case K_RETURNING:
      case K_WHEN:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AS:
          jj_consume_token(K_AS);
          break;
        default:
          jj_la1[121] = jj_gen;
          ;
        }
        SelectItemAlias();
        break;
      default:
        jj_la1[122] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SelectItemAlias() throws ParseException {
 /*@bgen(jjtree) SelectItemAlias */
  SelectItemAlias jjtn000 = new SelectItemAlias(this, JJTSELECTITEMALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        OracleObjectName();
        break;
      case K_RETURNING:
        jj_consume_token(K_RETURNING);
        break;
      case K_WHEN:
        jj_consume_token(K_WHEN);
        break;
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WindowingClause() throws ParseException {
 /*@bgen(jjtree) WindowingClause */
  WindowingClause jjtn000 = new WindowingClause(this, JJTWINDOWINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ROWS:
        jj_consume_token(K_ROWS);
        break;
      case K_RANGE:
        jj_consume_token(K_RANGE);
        break;
      default:
        jj_la1[124] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CURRENT:
        jj_consume_token(K_CURRENT);
        jj_consume_token(K_ROW);
        break;
      case K_CASE:
      case K_CAST:
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 153:
      case 157:
      case 167:
      case 168:
        SQLSimpleExpression();
        ID("PRECEDING");
        break;
      case K_BETWEEN:
        jj_consume_token(K_BETWEEN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CURRENT:
          jj_consume_token(K_CURRENT);
          jj_consume_token(K_ROW);
          break;
        case K_CASE:
        case K_CAST:
        case K_NULL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 153:
        case 157:
        case 167:
        case 168:
          SQLSimpleExpression();
          ID("PRECEDING|FOLLOWING");
          break;
        default:
          jj_la1[125] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(K_AND);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CURRENT:
          jj_consume_token(K_CURRENT);
          jj_consume_token(K_ROW);
          break;
        case K_CASE:
        case K_CAST:
        case K_NULL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 153:
        case 157:
        case 167:
        case 168:
          SQLSimpleExpression();
          ID("PRECEDING|FOLLOWING");
          break;
        default:
          jj_la1[126] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IntoClause() throws ParseException {
 /*@bgen(jjtree) IntoClause */
  IntoClause jjtn000 = new IntoClause(this, JJTINTOCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_INTO);
      DataItem();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 162:
          ;
          break;
        default:
          jj_la1[128] = jj_gen;
          break label_23;
        }
        jj_consume_token(162);
        DataItem();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DataItem() throws ParseException {
 /*@bgen(jjtree) DataItem */
  DataItem jjtn000 = new DataItem(this, JJTDATAITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        jj_consume_token(S_IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 158:
          jj_consume_token(158);
          jj_consume_token(S_IDENTIFIER);
          break;
        default:
          jj_la1[129] = jj_gen;
          ;
        }
        break;
      case S_BIND:
      case 157:
        BindVariable();
        break;
      default:
        jj_la1[130] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 153:
        jj_consume_token(153);
        PlSqlSimpleExpression();
        jj_consume_token(154);
        break;
      default:
        jj_la1[131] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FromClause() throws ParseException {
 /*@bgen(jjtree) FromClause */
  FromClause jjtn000 = new FromClause(this, JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FROM);
      TableReference();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 162:
          ;
          break;
        default:
          jj_la1[132] = jj_gen;
          break label_24;
        }
        jj_consume_token(162);
        TableReference();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TableReference() throws ParseException {
 /*@bgen(jjtree) TableReference */
  TableReference jjtn000 = new TableReference(this, JJTTABLEREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ONLY:
        jj_consume_token(K_ONLY);
        jj_consume_token(153);
        QueryTableExpression();
        jj_consume_token(154);
        break;
      case K_TABLE:
      case S_IDENTIFIER:
      case S_BIND:
      case S_QUOTED_IDENTIFIER:
      case 153:
      case 157:
        QueryTableExpression();
        break;
      default:
        jj_la1[133] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void QueryTableExpression() throws ParseException {
 /*@bgen(jjtree) QueryTableExpression */
  QueryTableExpression jjtn000 = new QueryTableExpression(this, JJTQUERYTABLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        TableName();
        break;
      case K_TABLE:
        TableCollectionExpression();
        break;
      default:
        jj_la1[134] = jj_gen;
        if (jj_2_22(3)) {
          jj_consume_token(153);
          SubQuery();
          jj_consume_token(154);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 153:
            jj_consume_token(153);
            TableReference();
            jj_consume_token(154);
            break;
          case S_BIND:
          case 157:
            BindVariable();
            break;
          default:
            jj_la1[135] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PX_GRANULE:
        jj_consume_token(K_PX_GRANULE);
        jj_consume_token(153);
        jj_consume_token(S_NUMBER);
        jj_consume_token(162);
        jj_consume_token(S_IDENTIFIER);
        jj_consume_token(162);
        jj_consume_token(S_IDENTIFIER);
        jj_consume_token(154);
        break;
      default:
        jj_la1[136] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SAMPLE:
        jj_consume_token(K_SAMPLE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          ID("BLOCK");
          break;
        default:
          jj_la1[137] = jj_gen;
          ;
        }
        jj_consume_token(153);
        jj_consume_token(S_NUMBER);
        jj_consume_token(154);
        break;
      default:
        jj_la1[138] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        OracleObjectName();
        break;
      default:
        jj_la1[139] = jj_gen;
        ;
      }
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_FULL:
        case K_INNER:
        case K_LEFT:
        case K_RIGHT:
          ;
          break;
        default:
          jj_la1[140] = jj_gen;
          break label_25;
        }
        Join();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TableCollectionExpression() throws ParseException {
 /*@bgen(jjtree) TableCollectionExpression */
  TableCollectionExpression jjtn000 = new TableCollectionExpression(this, JJTTABLECOLLECTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_TABLE);
      jj_consume_token(153);
      SQLSimpleExpression();
      jj_consume_token(154);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 153:
        jj_consume_token(153);
        jj_consume_token(167);
        jj_consume_token(154);
        break;
      default:
        jj_la1[141] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Join() throws ParseException {
 /*@bgen(jjtree) Join */
  Join jjtn000 = new Join(this, JJTJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      JoinType();
      ID("JOIN");
      TableReference();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ON:
        jj_consume_token(K_ON);
        SQLExpression();
        break;
      case K_USING:
        jj_consume_token(K_USING);
        jj_consume_token(153);
        ColumnName();
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 162:
            ;
            break;
          default:
            jj_la1[142] = jj_gen;
            break label_26;
          }
          jj_consume_token(162);
          ColumnName();
        }
        jj_consume_token(154);
        break;
      default:
        jj_la1[143] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void JoinType() throws ParseException {
 /*@bgen(jjtree) JoinType */
  JoinType jjtn000 = new JoinType(this, JJTJOINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INNER:
        jj_consume_token(K_INNER);
        break;
      case K_FULL:
      case K_LEFT:
      case K_RIGHT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_LEFT:
          jj_consume_token(K_LEFT);
          break;
        case K_RIGHT:
          jj_consume_token(K_RIGHT);
          break;
        case K_FULL:
          jj_consume_token(K_FULL);
          break;
        default:
          jj_la1[144] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ID("OUTER");
        break;
      default:
        jj_la1[145] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ColumnName() throws ParseException {
 /*@bgen(jjtree) ColumnName */
  ColumnName jjtn000 = new ColumnName(this, JJTCOLUMNNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhereClause() throws ParseException {
 /*@bgen(jjtree) WhereClause */
  WhereClause jjtn000 = new WhereClause(this, JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_WHERE);
      SQLExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void GroupByClause() throws ParseException {
 /*@bgen(jjtree) GroupByClause */
  GroupByClause jjtn000 = new GroupByClause(this, JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_GROUP);
      jj_consume_token(K_BY);
      SQLExpressionList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void HavingClause() throws ParseException {
 /*@bgen(jjtree) HavingClause */
  HavingClause jjtn000 = new HavingClause(this, JJTHAVINGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_HAVING);
      SQLExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OrderByClause() throws ParseException {
 /*@bgen(jjtree) OrderByClause */
  OrderByClause jjtn000 = new OrderByClause(this, JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_ORDER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SIBLINGS:
        jj_consume_token(K_SIBLINGS);
        break;
      default:
        jj_la1[146] = jj_gen;
        ;
      }
      jj_consume_token(K_BY);
      OrderByExpression();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 162:
          ;
          break;
        default:
          jj_la1[147] = jj_gen;
          break label_27;
        }
        jj_consume_token(162);
        OrderByExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OrderByExpression() throws ParseException {
 /*@bgen(jjtree) OrderByExpression */
  OrderByExpression jjtn000 = new OrderByExpression(this, JJTORDERBYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
      case K_DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ASC:
          jj_consume_token(K_ASC);
          break;
        case K_DESC:
          jj_consume_token(K_DESC);
          break;
        default:
          jj_la1[148] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[149] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULLS:
        jj_consume_token(K_NULLS);
        ID("LAST");
        break;
      default:
        jj_la1[150] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForUpdateClause() throws ParseException {
 /*@bgen(jjtree) ForUpdateClause */
  ForUpdateClause jjtn000 = new ForUpdateClause(this, JJTFORUPDATECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FOR);
      jj_consume_token(K_UPDATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OF:
        jj_consume_token(K_OF);
        TableColumn();
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 162:
            ;
            break;
          default:
            jj_la1[151] = jj_gen;
            break label_28;
          }
          jj_consume_token(162);
          TableColumn();
        }
        break;
      default:
        jj_la1[152] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOWAIT:
      case K_WAIT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOWAIT:
          jj_consume_token(K_NOWAIT);
          break;
        case K_WAIT:
          jj_consume_token(K_WAIT);
          SQLSimpleExpression();
          break;
        default:
          jj_la1[153] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[154] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLExpression() throws ParseException {
 /*@bgen(jjtree) SQLExpression */
  SQLExpression jjtn000 = new SQLExpression(this, JJTSQLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLAndExpression();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OR:
          ;
          break;
        default:
          jj_la1[155] = jj_gen;
          break label_29;
        }
        jj_consume_token(K_OR);
        SQLAndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLAndExpression() throws ParseException {
 /*@bgen(jjtree) SQLAndExpression */
  SQLAndExpression jjtn000 = new SQLAndExpression(this, JJTSQLANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLUnaryLogicalExpression();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AND:
          ;
          break;
        default:
          jj_la1[156] = jj_gen;
          break label_30;
        }
        jj_consume_token(K_AND);
        SQLUnaryLogicalExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLUnaryLogicalExpression() throws ParseException {
 /*@bgen(jjtree) SQLUnaryLogicalExpression */
  SQLUnaryLogicalExpression jjtn000 = new SQLUnaryLogicalExpression(this, JJTSQLUNARYLOGICALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_23(2)) {
        ExistsClause();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CASE:
        case K_CAST:
        case K_NOT:
        case K_NULL:
        case K_PRIOR:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 153:
        case 157:
        case 167:
        case 168:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_NOT:
            jj_consume_token(K_NOT);
            break;
          default:
            jj_la1[157] = jj_gen;
            ;
          }
          SQLRelationalExpression();
          break;
        default:
          jj_la1[158] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExistsClause() throws ParseException {
 /*@bgen(jjtree) ExistsClause */
  ExistsClause jjtn000 = new ExistsClause(this, JJTEXISTSCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
        break;
      default:
        jj_la1[159] = jj_gen;
        ;
      }
      jj_consume_token(K_EXISTS);
      jj_consume_token(153);
      SubQuery();
      jj_consume_token(154);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLRelationalExpression() throws ParseException {
 /*@bgen(jjtree) SQLRelationalExpression */
  SQLRelationalExpression jjtn000 = new SQLRelationalExpression(this, JJTSQLRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_24(2147483647)) {
        jj_consume_token(153);
        SQLExpressionList();
        jj_consume_token(154);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CASE:
        case K_CAST:
        case K_NULL:
        case K_PRIOR:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 153:
        case 157:
        case 167:
        case 168:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_PRIOR:
            jj_consume_token(K_PRIOR);
            break;
          default:
            jj_la1[160] = jj_gen;
            ;
          }
          SQLSimpleExpression();
          break;
        default:
          jj_la1[161] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_BETWEEN:
      case K_IN:
      case K_IS:
      case K_LIKE:
      case K_NOT:
      case 166:
      case 174:
      case 175:
      case 176:
      case 177:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 166:
        case 174:
        case 175:
        case 176:
        case 177:
          SQLRelationalOperatorExpression();
          break;
        default:
          jj_la1[162] = jj_gen;
          if (jj_2_25(2)) {
            SQLInClause();
          } else if (jj_2_26(2)) {
            SQLBetweenClause();
          } else if (jj_2_27(2)) {
            SQLLikeClause();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_IS:
              IsNullClause();
              break;
            default:
              jj_la1[163] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      default:
        jj_la1[164] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLExpressionList() throws ParseException {
 /*@bgen(jjtree) SQLExpressionList */
  SQLExpressionList jjtn000 = new SQLExpressionList(this, JJTSQLEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLExpression();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 162:
          ;
          break;
        default:
          jj_la1[165] = jj_gen;
          break label_31;
        }
        jj_consume_token(162);
        SQLExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLRelationalOperatorExpression() throws ParseException {
 /*@bgen(jjtree) SQLRelationalOperatorExpression */
  SQLRelationalOperatorExpression jjtn000 = new SQLRelationalOperatorExpression(this, JJTSQLRELATIONALOPERATOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Relop();
      if (jj_2_28(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
        case K_ANY:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ALL:
            jj_consume_token(K_ALL);
            break;
          case K_ANY:
            jj_consume_token(K_ANY);
            break;
          default:
            jj_la1[166] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[167] = jj_gen;
          ;
        }
        jj_consume_token(153);
        SubQuery();
        jj_consume_token(154);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CASE:
        case K_CAST:
        case K_NULL:
        case K_PRIOR:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 153:
        case 157:
        case 167:
        case 168:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_PRIOR:
            jj_consume_token(K_PRIOR);
            break;
          default:
            jj_la1[168] = jj_gen;
            ;
          }
          SQLSimpleExpression();
          break;
        default:
          jj_la1[169] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLInClause() throws ParseException {
 /*@bgen(jjtree) SQLInClause */
  SQLInClause jjtn000 = new SQLInClause(this, JJTSQLINCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
        break;
      default:
        jj_la1[170] = jj_gen;
        ;
      }
      jj_consume_token(K_IN);
      jj_consume_token(153);
      if (jj_2_29(3)) {
        SubQuery();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CASE:
        case K_CAST:
        case K_EXISTS:
        case K_NOT:
        case K_NULL:
        case K_PRIOR:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 153:
        case 157:
        case 167:
        case 168:
          SQLExpressionList();
          break;
        default:
          jj_la1[171] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(154);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLBetweenClause() throws ParseException {
 /*@bgen(jjtree) SQLBetweenClause */
  SQLBetweenClause jjtn000 = new SQLBetweenClause(this, JJTSQLBETWEENCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
        break;
      default:
        jj_la1[172] = jj_gen;
        ;
      }
      jj_consume_token(K_BETWEEN);
      SQLSimpleExpression();
      jj_consume_token(K_AND);
      SQLSimpleExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLLikeClause() throws ParseException {
 /*@bgen(jjtree) SQLLikeClause */
  SQLLikeClause jjtn000 = new SQLLikeClause(this, JJTSQLLIKECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
        break;
      default:
        jj_la1[173] = jj_gen;
        ;
      }
      jj_consume_token(K_LIKE);
      SQLSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ESCAPE:
        jj_consume_token(K_ESCAPE);
        SQLSimpleExpression();
        break;
      default:
        jj_la1[174] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLSimpleExpression() throws ParseException {
 /*@bgen(jjtree) SQLSimpleExpression */
  SQLSimpleExpression jjtn000 = new SQLSimpleExpression(this, JJTSQLSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLMultiplicativeExpression();
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 167:
        case 168:
        case 169:
          ;
          break;
        default:
          jj_la1[175] = jj_gen;
          break label_32;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 167:
          jj_consume_token(167);
          break;
        case 168:
          jj_consume_token(168);
          break;
        case 169:
          jj_consume_token(169);
          break;
        default:
          jj_la1[176] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        SQLMultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLMultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) SQLMultiplicativeExpression */
  SQLMultiplicativeExpression jjtn000 = new SQLMultiplicativeExpression(this, JJTSQLMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLExponentExpression();
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 170:
        case 171:
          ;
          break;
        default:
          jj_la1[177] = jj_gen;
          break label_33;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 170:
          jj_consume_token(170);
          break;
        case 171:
          jj_consume_token(171);
          break;
        default:
          jj_la1[178] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        SQLExponentExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLExponentExpression() throws ParseException {
 /*@bgen(jjtree) SQLExponentExpression */
  SQLExponentExpression jjtn000 = new SQLExponentExpression(this, JJTSQLEXPONENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLUnaryExpression();
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 172:
          ;
          break;
        default:
          jj_la1[179] = jj_gen;
          break label_34;
        }
        jj_consume_token(172);
        SQLUnaryExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLUnaryExpression() throws ParseException {
 /*@bgen(jjtree) SQLUnaryExpression */
  SQLUnaryExpression jjtn000 = new SQLUnaryExpression(this, JJTSQLUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 167:
      case 168:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 167:
          jj_consume_token(167);
          break;
        case 168:
          jj_consume_token(168);
          break;
        default:
          jj_la1[180] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[181] = jj_gen;
        ;
      }
      SQLPrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLPrimaryExpression() throws ParseException {
 /*@bgen(jjtree) SQLPrimaryExpression */
  SQLPrimaryExpression jjtn000 = new SQLPrimaryExpression(this, JJTSQLPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_NUMBER:
        jj_consume_token(S_NUMBER);
        break;
      case S_CHAR_LITERAL:
        jj_consume_token(S_CHAR_LITERAL);
        break;
      case K_NULL:
        jj_consume_token(K_NULL);
        break;
      case K_CASE:
        SQLCaseExpression();
        break;
      case 153:
        jj_consume_token(153);
        if (jj_2_30(3)) {
          SelectStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_CASE:
          case K_CAST:
          case K_EXISTS:
          case K_NOT:
          case K_NULL:
          case K_PRIOR:
          case S_NUMBER:
          case S_IDENTIFIER:
          case S_BIND:
          case S_CHAR_LITERAL:
          case S_QUOTED_IDENTIFIER:
          case 153:
          case 157:
          case 167:
          case 168:
            SQLExpression();
            break;
          default:
            jj_la1[182] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(154);
        break;
      case S_BIND:
      case 157:
        BindVariable();
        break;
      default:
        jj_la1[183] = jj_gen;
        if (jj_2_31(2)) {
          SQLCastExpression();
        } else if (jj_2_32(2147483647)) {
          IntervalExpression();
        } else if (jj_2_33(2147483647)) {
          OuterJoinExpression();
        } else if (jj_2_34(2147483647)) {
          FunctionCall();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S_IDENTIFIER:
          case S_QUOTED_IDENTIFIER:
            TableColumn();
            break;
          default:
            jj_la1[184] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLCaseExpression() throws ParseException {
 /*@bgen(jjtree) SQLCaseExpression */
  SQLCaseExpression jjtn000 = new SQLCaseExpression(this, JJTSQLCASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CASE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CASE:
      case K_CAST:
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 153:
      case 157:
      case 167:
      case 168:
        SQLSimpleExpression();
        label_35:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_WHEN:
            ;
            break;
          default:
            jj_la1[185] = jj_gen;
            break label_35;
          }
          jj_consume_token(K_WHEN);
          SQLSimpleExpression();
          jj_consume_token(K_THEN);
          SQLSimpleExpression();
        }
        break;
      default:
        jj_la1[187] = jj_gen;
        label_36:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_WHEN:
            ;
            break;
          default:
            jj_la1[186] = jj_gen;
            break label_36;
          }
          jj_consume_token(K_WHEN);
          SQLExpression();
          jj_consume_token(K_THEN);
          SQLSimpleExpression();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ELSE:
        jj_consume_token(K_ELSE);
        SQLSimpleExpression();
        break;
      default:
        jj_la1[188] = jj_gen;
        ;
      }
      jj_consume_token(K_END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLCastExpression() throws ParseException {
 /*@bgen(jjtree) SQLCastExpression */
  SQLCastExpression jjtn000 = new SQLCastExpression(this, JJTSQLCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CAST);
      jj_consume_token(153);
      SQLExpression();
      jj_consume_token(K_AS);
      BasicDataTypeDefinition();
      jj_consume_token(154);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IntervalExpression() throws ParseException {
 /*@bgen(jjtree) IntervalExpression */
  IntervalExpression jjtn000 = new IntervalExpression(this, JJTINTERVALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ID("INTERVAL");
      SQLSimpleExpression();
      if ("DAY".equalsIgnoreCase(getToken(1).image)) {
        ID("DAY");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 153:
          jj_consume_token(153);
          jj_consume_token(S_NUMBER);
          jj_consume_token(154);
          break;
        default:
          jj_la1[189] = jj_gen;
          ;
        }
        jj_consume_token(K_TO);
        ID("SECOND");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 153:
          jj_consume_token(153);
          jj_consume_token(S_NUMBER);
          jj_consume_token(154);
          break;
        default:
          jj_la1[190] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          ID("YEAR");
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 153:
            jj_consume_token(153);
            jj_consume_token(S_NUMBER);
            jj_consume_token(154);
            break;
          default:
            jj_la1[191] = jj_gen;
            ;
          }
          jj_consume_token(K_TO);
          ID("MONTH");
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 153:
            jj_consume_token(153);
            jj_consume_token(S_NUMBER);
            jj_consume_token(154);
            break;
          default:
            jj_la1[192] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[193] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionCall() throws ParseException {
 /*@bgen(jjtree) FunctionCall */
  FunctionCall jjtn000 = new FunctionCall(this, JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionReference();
      if ("TRIM".equalsIgnoreCase(lastObjectReference)) {
        TrimArguments();
      } else if ("EXTRACT".equalsIgnoreCase(lastObjectReference)) {
        jj_consume_token(153);
        DatetimeField();
        jj_consume_token(K_FROM);
        SQLSimpleExpression();
        jj_consume_token(154);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 153:
          jj_consume_token(153);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ALL:
          case K_CASE:
          case K_CAST:
          case K_DISTINCT:
          case K_EXISTS:
          case K_NOT:
          case K_NULL:
          case K_PRIOR:
          case K_UNIQUE:
          case S_NUMBER:
          case S_IDENTIFIER:
          case S_BIND:
          case S_CHAR_LITERAL:
          case S_QUOTED_IDENTIFIER:
          case 153:
          case 157:
          case 167:
          case 168:
          case 170:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_ALL:
            case K_DISTINCT:
            case K_UNIQUE:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case K_ALL:
                jj_consume_token(K_ALL);
                break;
              case K_DISTINCT:
                jj_consume_token(K_DISTINCT);
                break;
              case K_UNIQUE:
                jj_consume_token(K_UNIQUE);
                break;
              default:
                jj_la1[194] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              jj_la1[195] = jj_gen;
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_CASE:
            case K_CAST:
            case K_EXISTS:
            case K_NOT:
            case K_NULL:
            case K_PRIOR:
            case S_NUMBER:
            case S_IDENTIFIER:
            case S_BIND:
            case S_CHAR_LITERAL:
            case S_QUOTED_IDENTIFIER:
            case 153:
            case 157:
            case 167:
            case 168:
              FunctionArgumentList();
              break;
            case 170:
              jj_consume_token(170);
              break;
            default:
              jj_la1[196] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[197] = jj_gen;
            ;
          }
          jj_consume_token(154);
          break;
        default:
          jj_la1[198] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionReference() throws ParseException {
 /*@bgen(jjtree) FunctionReference */
  FunctionReference jjtn000 = new FunctionReference(this, JJTFUNCTIONREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String name;
    try {
      name = ObjectReference();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    functions.add(name.toUpperCase());
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionArgumentList() throws ParseException {
 /*@bgen(jjtree) FunctionArgumentList */
  FunctionArgumentList jjtn000 = new FunctionArgumentList(this, JJTFUNCTIONARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionArgument();
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 162:
          ;
          break;
        default:
          jj_la1[199] = jj_gen;
          break label_37;
        }
        jj_consume_token(162);
        FunctionArgument();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionArgument() throws ParseException {
 /*@bgen(jjtree) FunctionArgument */
  FunctionArgument jjtn000 = new FunctionArgument(this, JJTFUNCTIONARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_35(2)) {
        jj_consume_token(S_IDENTIFIER);
        jj_consume_token(179);
      } else {
        ;
      }
      SQLExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TrimArguments() throws ParseException {
 /*@bgen(jjtree) TrimArguments */
  TrimArguments jjtn000 = new TrimArguments(this, JJTTRIMARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(153);
      if (getToken(1).image.matches("(?i)LEADING|TRAILING|BOTH")) {
        jj_consume_token(S_IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CASE:
        case K_CAST:
        case K_NULL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 153:
        case 157:
        case 167:
        case 168:
          SQLSimpleExpression();
          break;
        default:
          jj_la1[200] = jj_gen;
          ;
        }
        jj_consume_token(K_FROM);
        SQLSimpleExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CASE:
        case K_CAST:
        case K_NULL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 153:
        case 157:
        case 167:
        case 168:
          SQLSimpleExpression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_FROM:
            jj_consume_token(K_FROM);
            SQLSimpleExpression();
            break;
          default:
            jj_la1[201] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[202] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(154);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DatetimeField() throws ParseException {
 /*@bgen(jjtree) DatetimeField */
  DatetimeField jjtn000 = new DatetimeField(this, JJTDATETIMEFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String ObjectReference() throws ParseException {
 /*@bgen(jjtree) ObjectReference */
  ObjectReference jjtn000 = new ObjectReference(this, JJTOBJECTREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s;
  StringBuilder name = new StringBuilder();
    try {
      s = OracleObjectName();
    name.append(s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 158:
        jj_consume_token(158);
        s = OracleObjectName();
      name.append(".").append(s);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 158:
          jj_consume_token(158);
          s = OracleObjectName();
        name.append(".").append(s);
          break;
        default:
          jj_la1[203] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[204] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 178:
        jj_consume_token(178);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 174:
          jj_consume_token(174);
          break;
        case S_IDENTIFIER:
          s = TNSName();
        name.append("@").append(s);
          break;
        default:
          jj_la1[205] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[206] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return lastObjectReference = name.toString();}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void OuterJoinExpression() throws ParseException {
 /*@bgen(jjtree) OuterJoinExpression */
  OuterJoinExpression jjtn000 = new OuterJoinExpression(this, JJTOUTERJOINEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TableColumn();
      jj_consume_token(153);
      jj_consume_token(167);
      jj_consume_token(154);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SubQuery() throws ParseException {
 /*@bgen(jjtree) SubQuery */
  SubQuery jjtn000 = new SubQuery(this, JJTSUBQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectStatement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** Expect an <S_IDENTIFIER> with the given value. */
  final public void ID(String id) throws ParseException {
 /*@bgen(jjtree) ID */
  ID jjtn000 = new ID(this, JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (!token.image.matches("(?i)"+ id))
    {
      {if (true) throw new ParseException("Encountered "+ token.image
      + " at line "+ token.beginLine+ ", column "+ token.beginColumn+ "."
      + "\u005cnWas expecting: "+ id);}
    }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(K_SKIP)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) return true;
    }
    }
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(179)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_54()) return true;
    xsp = jj_scanpos;
    if (jj_3R_222()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(K_CURSOR)) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(153)) return true;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) return true;
    }
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_234() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(153)) return true;
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = seeTYPE();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_219() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    if (jj_scan_token(153)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_217()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) return true;
    }
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(162)) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_137()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_214()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(178)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(162)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_193() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_203()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_194()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(177)) return true;
    if (jj_scan_token(166)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_scan_token(153)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(177)) return true;
    if (jj_scan_token(176)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(176)) return true;
    if (jj_scan_token(166)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(174)) return true;
    if (jj_scan_token(166)) return true;
    return false;
  }

  private boolean jj_3R_217() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_scan_token(177)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(K_FOR)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(K_IN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    if (jj_scan_token(165)) return true;
    return false;
  }

  private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(158)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_3R_161()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_150()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_151()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(K_WAIT)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    }
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(162)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(S_QUOTED_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(K_OF)) return true;
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_185()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(K_FOR)) return true;
    if (jj_scan_token(K_UPDATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(153)) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(K_NULLS)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(162)) return true;
    if (jj_3R_171()) return true;
    return false;
  }

  private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    if (jj_scan_token(173)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(K_ORDER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_171()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(153)) return true;
    if (jj_scan_token(167)) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(K_HAVING)) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(153)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(K_GROUP)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(178)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(174)) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(153)) return true;
    if (jj_scan_token(167)) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) return true;
    }
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(172)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    }
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(K_ESCAPE)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_243() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_3R_246()) return true;
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_42()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_scan_token(162)) return true;
    if (jj_3R_247()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(K_USING)) return true;
    if (jj_scan_token(153)) return true;
    if (jj_3R_247()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_248()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(K_ON)) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_3R_243()) return true;
    if (jj_3R_60()) return true;
    if (jj_3R_198()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) return true;
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(153)) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.matches("(?i)LEADING|TRAILING|BOTH");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) return true;
    }
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(K_TABLE)) return true;
    if (jj_scan_token(153)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(154)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) return true;
    }
    }
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(179)) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_79()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(K_SAMPLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_238()) jj_scanpos = xsp;
    if (jj_scan_token(153)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_195() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(153)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(153)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(K_PX_GRANULE)) return true;
    if (jj_scan_token(153)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(162)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(162)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_198()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(162)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(162)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_236()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_195()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_196()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_67()) return true;
    xsp = jj_scanpos;
    if (jj_3R_225()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_218() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_230()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_233()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(158)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(K_ONLY)) return true;
    if (jj_scan_token(153)) return true;
    if (jj_3R_218()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_198() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(153)) return true;
    if (jj_3R_224()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(162)) return true;
    if (jj_3R_198()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(153)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) jj_scanpos = xsp;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(162)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_198()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_199()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_179() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_156()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_235()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_scan_token(170)) return true;
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(160)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(153)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) jj_scanpos = xsp;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_163()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(153)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(162)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_154()) return true;
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(153)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(K_INTO)) return true;
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_208()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_217()) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = "TRIM".equalsIgnoreCase(lastObjectReference);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_139()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = "EXTRACT".equalsIgnoreCase(lastObjectReference);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_60()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    if (jj_scan_token(K_TO)) return true;
    if (jj_3R_60()) return true;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) return true;
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_60()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    if (jj_scan_token(K_TO)) return true;
    if (jj_3R_60()) return true;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_181() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(K_INDEX)) return true;
    if (jj_scan_token(K_BY)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_60()) return true;
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = "DAY".equalsIgnoreCase(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_181()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_182()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(K_CAST)) return true;
    if (jj_scan_token(153)) return true;
    if (jj_3R_137()) return true;
    if (jj_scan_token(K_AS)) return true;
    if (jj_3R_138()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_137()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_168()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_146()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_145()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(153)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(K_CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    if (jj_scan_token(K_END)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(180)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(180)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(158)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(162)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_132()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(153)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_212()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_211()) return true;
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_200()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) return true;
    }
    return false;
  }

  private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(K_ESCAPE)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(157)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(172)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) return true;
    }
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    }
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_158()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PlSqlTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[207];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000000,0x82086000,0x0,0x0,0x80086000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x80086000,0x0,0x80000,0x0,0x0,0x80086000,0x0,0x100800,0x0,0x100800,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20060000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000,0x60000,0x0,0x0,0x20060000,0x0,0x0,0x80,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000,0x60000,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80086000,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x60000,0x60000,0x200,0x200,0x0,0x0,0x20060000,0x20060000,0x20061000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x60000,0x0,0x0,0x60000,0x0,0x0,0x1000,0x0,0x120,0x120,0x0,0x60000,0x0,0x60000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000,0x20000,0x0,0x0,0x0,0x60000,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x60000,0x60020,0x0,0x0,0x60000,0x0,0x60000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x80020000,0x0,0x0,0x80020000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x4,0x0,0x80020000,0x0,0x80020000,0x0,0x0,0x80020000,0x0,0x448c000a,0x2,0x448c000a,0x40000008,0x40000008,0x100,0x80,0x0,0x40000,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4004,0x4004,0x100000,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x4,0x4,0x88020000,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x2000000,0x3000000,0x3000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20200000,0x0,0x0,0x0,0x200000,0x20200000,0x0,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x4000,0x4020,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x8400,0x0,0x0,0x8400,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x800,0x0,0x0,0x8400,0x0,0x8400,0x0,0x0,0x8400,0x0,0x82180,0x0,0x82180,0x0,0x80100,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10002800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10002800,0x10002800,0x0,0x0,0x10002800,0x0,0x100000,0x0,0x800,0x0,0x4,0x824,0x0,0x800,0x800,0x800,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2800,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x408400,0x0,0x200000,0x0,0x0,0x201,0x0,0x201,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x2000,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x40000000,0x0,0x0,0x0,0x10,0x0,0x0,0x20000,0x10,0x10,0x0,0x0,0x0,0x0,0x4000,0x0,0x10000,0x1000,0x1000,0x100000,0x0,0x800,0x10002800,0x800,0x10000000,0x10002000,0x0,0x4,0x824,0x0,0x0,0x0,0x10000000,0x10002000,0x800,0x10002800,0x800,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10002800,0x2000,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10002800,0x10002800,0x0,0x0,0x2000,0x0,0x2000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x1000004,0x0,0x0,0x1000004,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000004,0x0,0x4,0x0,0x0,0x4,0x0,0x8000c000,0x0,0x8000c000,0x80000000,0x8000c000,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000004,0x0,0x0,0x0,0x100000,0x20000000,0x0,0x20000000,0x8000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x1001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x2000,0x0,0x200,0x0,0x0,0x0,0x200,0x200,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x40000,0x840018,0x2000000,0x2000000,0x40018,0x8000000,0x8000000,0x10000000,0x10000000,0x40000,0x40000000,0x41000,0x20200000,0x0,0x0,0x80000000,0x80000000,0x0,0x80000000,0x0,0x18,0x40000,0x18,0x0,0x2000000,0x18,0x40000,0x22240100,0x0,0x2000100,0x0,0x2000000,0x0,0x0,0x40000,0x100,0x40000,0x0,0x0,0x0,0x2000000,0x2840000,0x2000000,0x2840000,0x840000,0x22e41000,0x80,0x0,0x0,0x0,0x0,0x2840000,0x840000,0x0,0x0,0x2000004,0x0,0x0,0x22e41000,0x22e41000,0x0,0x840000,0x22e41000,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x40000,0x0,0x0,0x22e41000,0x22e41000,0x40000,0x22601000,0x840000,0x840000,0x40000000,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x41000,0x0,0x0,0x80000000,0x80000000,0x840018,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x22e41000,0x22e41000,0x0,0x840040,0x840040,0x0,0x22e41000,0x22e41000,0x22e41000,0x0,0x40000000,0x20240000,0x2000000,0x0,0x22a40000,0x840000,0x22200000,0x0,0x40000,0x0,0x840000,0x0,0x2000000,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x22e41000,0x0,0x0,0x22e41000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x22e41000,0x0,0x22e41000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x22e41000,0x22601000,0x840000,0x40,0x40,0x22e41000,0x0,0x2000000,0x2000000,0x2000000,0x2000000,0x40000,0x0,0x0,0x22e41000,0x22e41000,0x2000000,0x0,0x22e41000,0x0,0x22e41000,0x40000000,0x40000000,0x40000,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x0,0x4,0x4,0x4,0x0,0x0,0x4,0x0,0x0,0x4,0x4,0x180,0x180,0x0,0x0,0x180,0x0,0x0,0x0,0x0,0x3c040,0x0,0x3c040,0x4,0x0,0x0,0x0,0x0,0x0,0x380,0x380,0xc00,0xc00,0x1000,0x180,0x180,0x180,0x0,0x0,0x0,0x0,0x0,0xc040,0x10000,0x20000,0x0,0x40000,0x4,0x180,0x180,0x180,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x580,0x180,0x0,0x0,0x0,0x0,0x180,0x180,0x180,0x4,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x0,0x180,0x3c040,0x0,0x3c040,0x4,0x0,0x0,0x0,0x180,0x0,0x180,0x0,0x0,0x0,0x380,0x380,0xc00,0xc00,0x1000,0x180,0x180,0x180,0x0,0x0,0x0,0x0,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x580,0x580,0x0,0x4,0x180,0x0,0x180,0x0,0x0,0x4000,0x40000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[35];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PlSql(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PlSql(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PlSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 207; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 207; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PlSql(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PlSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 207; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 207; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PlSql(PlSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 207; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PlSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 207; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[181];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 207; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 181; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 35; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
