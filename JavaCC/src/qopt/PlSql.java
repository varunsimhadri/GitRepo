/* Generated By:JJTree&JavaCC: Do not edit this line. PlSql.java */
package qopt;

import java.io.Reader;
import java.io.FileInputStream;
import java.util.HashSet;
import java.util.Set;
import java.util.Iterator;





@SuppressWarnings("all")
class PlSql/*@bgen(jjtree)*/implements PlSqlTreeConstants, PlSqlConstants {/*@bgen(jjtree)*/
  protected JJTPlSqlState jjtree = new JJTPlSqlState();
public class MultiplyOp extends SimpleNode {
  private int op;
        public MultiplyOp(int id) {
    super(id);
  }

  public MultiplyOp(PlSql p, int id) {
    super(p, id);
  }

  public void setOper(int x){
          op =x;
  }

  public int getOper(){
          return op;
  }
}

public class SimpleOp extends SimpleNode {
        private int op;
        public SimpleOp(int id) {
    super(id);
  }

  public SimpleOp(PlSql p, int id) {
    super(p, id);
  }

  public void setOper(int x){
          op =x;
  }

  public int getOper(){
          return op;
  }

}

public class UnaryExp extends SimpleNode {
        private int sign;
        public UnaryExp(int id) {
    super(id);
  }

  public UnaryExp(PlSql p, int id) {
    super(p, id);
  }

  public void setSign(int x){
          sign =x;
  }

  public int getSign(){
          return sign;
  }
}

    /** Parse PL/SQL from files.  Each arg is expected to be the name of a file,
        or "-" to indicate System.in.
     */
    public static void main( String args[] ) throws Throwable {
        if (args.length < 1) {
            args = new String[] {"-"};
        }
        for (int a = 0; a < args.length; ++a) {
            final String input = args[a];
            final PlSql parser = new PlSql("-".equals(input) ? System.in : new FileInputStream(input));
            try {
                SimpleNode rootNode = parser.CompilationUnit();
                rootNode.dump("t");
            } catch(Throwable t) {
                System.err.println(input + ":1: not parsed");
                t.printStackTrace();
            }
            Iterator  it = parser.tables.iterator();
            System.out.println(it.next() + " tables in " + input);
        }
    }

    public Set<String> functions = new HashSet<String>();
    public Set<String> procedures = new HashSet<String>();
    public Set<String> tables = new HashSet<String>();

    public void reInit(Reader input) {
        ReInit(input);
        functions.clear();
        procedures.clear();
        tables.clear();
    }

    private String lastObjectReference = null;

    protected boolean seeTYPE() {
        return "TYPE".equalsIgnoreCase(getToken(1).image);
    }

/* Represents a PLSQL code block. */
  final public SimpleNode CompilationUnit() throws ParseException {
 /*@bgen(jjtree) Root */
  Root jjtn000 = new Root(this, JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QueryStatement();
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void QueryStatement() throws ParseException {
    SelectStatement();
    jj_consume_token(152);
  }

  final public void SelectStatement() throws ParseException {
    SelectWithoutOrder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ORDER:
      OrderByClause();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  final public void SelectWithoutOrder() throws ParseException {
    SelectSet();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INTERSECT:
      case K_MINUS:
      case K_UNION:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_UNION:
        jj_consume_token(K_UNION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        break;
      case K_INTERSECT:
        jj_consume_token(K_INTERSECT);
        break;
      case K_MINUS:
        jj_consume_token(K_MINUS);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SelectSet();
    }
  }

  final public void SelectSet() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SELECT:
      Select();
      break;
    case 153:
      jj_consume_token(153);
      SubQuery();
      jj_consume_token(154);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Select() throws ParseException {
 /*@bgen(jjtree) Sel */
  Sel jjtn000 = new Sel(this, JJTSEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
      case K_UNIQUE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
          break;
        case K_UNIQUE:
          jj_consume_token(K_UNIQUE);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
                                                 Proj jjtn001 = new Proj(this, JJTPROJ);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
      try {
        SelectList();
      } catch (Throwable jjte001) {
                                                 if (jjtc001) {
                                                   jjtree.clearNodeScope(jjtn001);
                                                   jjtc001 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte001 instanceof RuntimeException) {
                                                   {if (true) throw (RuntimeException)jjte001;}
                                                 }
                                                 if (jjte001 instanceof ParseException) {
                                                   {if (true) throw (ParseException)jjte001;}
                                                 }
                                                 {if (true) throw (Error)jjte001;}
      } finally {
                                                 if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001, true);
                                                 }
      }
      From jjtn002 = new From(this, JJTFROM);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        FromClause();
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        where jjtn003 = new where(this, JJTWHERE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        try {
          WhereClause();
        } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte003;}
        }
        if (jjte003 instanceof ParseException) {
          {if (true) throw (ParseException)jjte003;}
        }
        {if (true) throw (Error)jjte003;}
        } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_GROUP:
      case K_HAVING:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_HAVING:
          HavingClause();
          GroupByClause();
          break;
        case K_GROUP:
          GroupByClause();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_HAVING:
            HavingClause();
            break;
          default:
            jj_la1[8] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/* Checks for whatever follows  SELECT */
  final public void SelectList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 155:
      jj_consume_token(155);
      break;
    case K_NULL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 153:
    case 159:
    case 160:
      SelectItem();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 156:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_2;
        }
        jj_consume_token(156);
        SelectItem();
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SelectItem() throws ParseException {
    if (jj_2_1(2)) {
      OracleObjectName();
      jj_consume_token(157);
    } else if (jj_2_2(4)) {
      OracleObjectName();
      jj_consume_token(158);
      OracleObjectName();
      jj_consume_token(157);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 153:
      case 159:
      case 160:
        SQLSimpleExpression();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
    case K_RETURNING:
    case K_WHEN:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      SelectItemAlias();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  final public void SelectItemAlias() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      OracleObjectName();
      break;
    case K_RETURNING:
      jj_consume_token(K_RETURNING);
      break;
    case K_WHEN:
      jj_consume_token(K_WHEN);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SubQuery() throws ParseException {
    SelectStatement();
  }

  final public void FromClause() throws ParseException {
    jj_consume_token(K_FROM);
    TableReference();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 156:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_3;
      }
      jj_consume_token(156);
      TableReference();
    }
  }

  final public void WhereClause() throws ParseException {
    jj_consume_token(K_WHERE);
    SQLExpression();
  }

  final public void GroupByClause() throws ParseException {
    jj_consume_token(K_GROUP);
    jj_consume_token(K_BY);
    SQLExpressionList();
  }

  final public void HavingClause() throws ParseException {
    jj_consume_token(K_HAVING);
    SQLExpression();
  }

  final public void OrderByClause() throws ParseException {
    jj_consume_token(K_ORDER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SIBLINGS:
      jj_consume_token(K_SIBLINGS);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(K_BY);
    OrderByExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 156:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_4;
      }
      jj_consume_token(156);
      OrderByExpression();
    }
  }

  final public void OrderByExpression() throws ParseException {
    SQLSimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ASC:
    case K_DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
        jj_consume_token(K_ASC);
        break;
      case K_DESC:
        jj_consume_token(K_DESC);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  final public String OracleObjectName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
                           {if (true) return token.image;}
      break;
    case S_QUOTED_IDENTIFIER:
      jj_consume_token(S_QUOTED_IDENTIFIER);
                           String s = token.image; {if (true) return s.substring(1, s.length() - 1);}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void TableReference() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ONLY:
      jj_consume_token(K_ONLY);
      jj_consume_token(153);
      QueryTableExpression();
      jj_consume_token(154);
      break;
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
    case 153:
      QueryTableExpression();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String ObjectReference() throws ParseException {
    String s;
    StringBuilder name = new StringBuilder();
    s = OracleObjectName();
                                name.append(s);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 158:
      jj_consume_token(158);
      s = OracleObjectName();
                                name.append(".").append(s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 158:
        jj_consume_token(158);
        s = OracleObjectName();
                                name.append(".").append(s);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
     {if (true) return lastObjectReference = name.toString();}
    throw new Error("Missing return statement in function");
  }

  final public void TableName() throws ParseException {
    String s;
    StringBuilder name = new StringBuilder();
    // schema.table@link
        s = OracleObjectName();
                                name.append(s);tables.add(name.toString().toUpperCase());
  }

  final public void QueryTableExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      TableName();
      break;
    default:
      jj_la1[26] = jj_gen;
      if (jj_2_3(3)) {
        jj_consume_token(153);
        SubQuery();
        jj_consume_token(154);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 153:
          jj_consume_token(153);
          TableReference();
          jj_consume_token(154);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      OracleObjectName();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  final public void SQLSimpleExpression() throws ParseException {
 /*@bgen(jjtree) SimpleExp */
  SimpleExp jjtn000 = new SimpleExp(this, JJTSIMPLEEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLMultiplicativeExpression();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 159:
        case 160:
        case 161:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_5;
        }
        SimpleOp();
        SQLMultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SimpleOp() throws ParseException {
 /*@bgen(jjtree) SimpleOp */
 SimpleOp jjtn000 = new SimpleOp(this, JJTSIMPLEOP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 159:
        t = jj_consume_token(159);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.setOper(0);
        break;
      case 160:
        t = jj_consume_token(160);
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                 jjtn000.setOper(1);
        break;
      case 161:
        t = jj_consume_token(161);
                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                    jjtc000 = false;
                                                                                   jjtn000.setOper(2);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SQLMultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) MultiplyExp */
  MultiplyExp jjtn000 = new MultiplyExp(this, JJTMULTIPLYEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLExponentExpression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 155:
        case 162:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_6;
        }
        MultiplyOp();
        SQLExponentExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MultiplyOp() throws ParseException {
 /*@bgen(jjtree) MultiplyOp */
 MultiplyOp jjtn000 = new MultiplyOp(this, JJTMULTIPLYOP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 155:
        t = jj_consume_token(155);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.setOper(3);
        break;
      case 162:
        t = jj_consume_token(162);
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                 jjtn000.setOper(4);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SQLExponentExpression() throws ParseException {
 /*@bgen(jjtree) ExpoExp */
  ExpoExp jjtn000 = new ExpoExp(this, JJTEXPOEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SQLUnaryExpression();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 163:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_7;
        }
        ExpoOp();
        SQLUnaryExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ExpoOp() throws ParseException {
 /*@bgen(jjtree) MultiplyOp */
 MultiplyOp jjtn000 = new MultiplyOp(this, JJTMULTIPLYOP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(163);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.setOper(5);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SQLUnaryExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExp */
  UnaryExp jjtn000 = new UnaryExp(this, JJTUNARYEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 159:
      case 160:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 159:
          jj_consume_token(159);
          jjtn000.setSign(0);
          break;
        case 160:
          jj_consume_token(160);
                                     jjtn000.setSign(1);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      SQLPrimaryExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SQLPrimaryExpression() throws ParseException {
 /*@bgen(jjtree) PrimExp */
  PrimExp jjtn000 = new PrimExp(this, JJTPRIMEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_NUMBER:
        jj_consume_token(S_NUMBER);
        break;
      case S_CHAR_LITERAL:
        jj_consume_token(S_CHAR_LITERAL);
        break;
      case K_NULL:
        jj_consume_token(K_NULL);
        break;
      case 153:
        jj_consume_token(153);
        if (jj_2_4(3)) {
          SelectStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_EXISTS:
          case K_NOT:
          case K_NULL:
          case K_PRIOR:
          case S_NUMBER:
          case S_IDENTIFIER:
          case S_CHAR_LITERAL:
          case S_QUOTED_IDENTIFIER:
          case 153:
          case 159:
          case 160:
            SQLExpression();
            break;
          default:
            jj_la1[36] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(154);
        break;
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        TableColumn();
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TableColumn() throws ParseException {
    ObjectReference();
  }

  final public void SQLExpression() throws ParseException {
    SQLAndExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OR:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_8;
      }
      jj_consume_token(K_OR);
      SQLAndExpression();
    }
  }

  final public void SQLAndExpression() throws ParseException {
    SQLUnaryLogicalExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_9;
      }
      jj_consume_token(K_AND);
      SQLUnaryLogicalExpression();
    }
  }

  final public void SQLUnaryLogicalExpression() throws ParseException {
    if (jj_2_5(2)) {
      ExistsClause();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
      case K_NULL:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 153:
      case 159:
      case 160:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          jj_consume_token(K_NOT);
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        SQLRelationalExpression();
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ExistsClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(K_EXISTS);
    jj_consume_token(153);
    SubQuery();
    jj_consume_token(154);
  }

  final public void SQLRelationalExpression() throws ParseException {
    if (jj_2_6(2147483647)) {
      jj_consume_token(153);
      SQLExpressionList();
      jj_consume_token(154);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 153:
      case 159:
      case 160:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PRIOR:
          jj_consume_token(K_PRIOR);
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        SQLSimpleExpression();
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_BETWEEN:
    case K_IN:
    case K_LIKE:
    case K_NOT:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
        SQLRelationalOperatorExpression();
        break;
      default:
        jj_la1[45] = jj_gen;
        if (jj_2_7(2)) {
          SQLInClause();
        } else if (jj_2_8(2)) {
          SQLBetweenClause();
        } else if (jj_2_9(2)) {
          SQLLikeClause();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
  }

  final public void SQLExpressionList() throws ParseException {
    SQLExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 156:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_10;
      }
      jj_consume_token(156);
      SQLExpression();
    }
  }

  final public void SQLRelationalOperatorExpression() throws ParseException {
    Relop();
    if (jj_2_10(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_ANY:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        case K_ANY:
          jj_consume_token(K_ANY);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      jj_consume_token(153);
      SubQuery();
      jj_consume_token(154);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 153:
      case 159:
      case 160:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PRIOR:
          jj_consume_token(K_PRIOR);
          break;
        default:
          jj_la1[50] = jj_gen;
          ;
        }
        SQLSimpleExpression();
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 164:
      jj_consume_token(164);
      break;
    case 165:
      jj_consume_token(165);
      jj_consume_token(164);
      break;
    case 166:
      jj_consume_token(166);
      break;
    default:
      jj_la1[52] = jj_gen;
      if (jj_2_11(2)) {
        jj_consume_token(167);
        jj_consume_token(164);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 167:
          jj_consume_token(167);
          break;
        default:
          jj_la1[53] = jj_gen;
          if (jj_2_12(2)) {
            jj_consume_token(168);
            jj_consume_token(167);
          } else if (jj_2_13(2)) {
            jj_consume_token(168);
            jj_consume_token(164);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 168:
              jj_consume_token(168);
              break;
            default:
              jj_la1[54] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void SQLInClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
    jj_consume_token(153);
    if (jj_2_14(3)) {
      SubQuery();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_EXISTS:
      case K_NOT:
      case K_NULL:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 153:
      case 159:
      case 160:
        SQLExpressionList();
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(154);
  }

  final public void SQLBetweenClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    SQLSimpleExpression();
    jj_consume_token(K_AND);
    SQLSimpleExpression();
  }

  final public void SQLLikeClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    SQLSimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ESCAPE:
      jj_consume_token(K_ESCAPE);
      SQLSimpleExpression();
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_90()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(162)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    }
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    if (jj_3R_45()) return true;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(153)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_40()) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(160)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_33()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(163)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_28()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(155)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(K_ESCAPE)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(156)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_15()) return true;
    xsp = jj_scanpos;
    if (jj_3R_100()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(153)) return true;
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(153)) return true;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(168)) return true;
    if (jj_scan_token(164)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(K_ONLY)) return true;
    if (jj_scan_token(153)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(168)) return true;
    if (jj_scan_token(167)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(167)) return true;
    if (jj_scan_token(164)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(165)) return true;
    if (jj_scan_token(164)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(S_QUOTED_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(156)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    if (jj_scan_token(153)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(156)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_96()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(K_ORDER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_71()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(K_HAVING)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(156)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(K_GROUP)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_scan_token(153)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(156)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(157)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(157)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(160)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PlSqlTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[60];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x20,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x120,0x120,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x2000000,0x3000000,0x3000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x400,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x200000,0x201,0x0,0x201,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10002800,0x2000,0x100000,0x0,0x800,0x10002800,0x800,0x10000000,0x10002000,0x0,0x820,0x0,0x0,0x0,0x10000000,0x10002000,0x0,0x0,0x0,0x800,0x10002800,0x800,0x800,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x20000000,0x0,0x20000000,0x8000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x80,0x0,0x0,0x0,0x10000000,0x8ac41000,0x82c41000,0x0,0x840040,0x840040,0x10000000,0x0,0x10000000,0x0,0x0,0x840000,0x2840000,0x40000000,0x40000000,0x840000,0x2000000,0x840000,0x80000000,0x80000000,0x8000000,0x8000000,0x0,0x80000000,0x80000000,0x82c41000,0x2c41000,0x0,0x0,0x0,0x82c41000,0x0,0x0,0x82c41000,0x0,0x0,0x10000000,0x0,0x0,0x0,0x82c41000,0x0,0x0,0x0,0x0,0x82c41000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x4,0x4,0x8,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x1f0,0x1f0,0x0,0x0,0x0,0x0,0x1,0x70,0x80,0x100,0x0,0x1,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[14];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PlSql(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PlSql(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PlSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PlSql(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PlSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PlSql(PlSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PlSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[169];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 60; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 169; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
