/* Generated By:JJTree&JavaCC: Do not edit this line. PlSql.java */
package apr.twenty;
import java.util.LinkedList;
import java.util.LinkedList;
import java.io.Reader;
import java.io.FileInputStream;
import apr.twenty.custom.*;
import apr.twenty.tree.*;
import java.util.HashSet;
import java.util.Set;
import java.util.Iterator;

@SuppressWarnings("all")
public class PlSql/*@bgen(jjtree)*/implements PlSqlTreeConstants, PlSqlConstants {/*@bgen(jjtree)*/
  protected JJTPlSqlState jjtree = new JJTPlSqlState();public static void main(String args []) throws Throwable
  {
    if (args.length < 1)
    {
      args = new String []
      {
        "-"
      }
      ;
    }
    for (int a = 0;
    a < args.length;
    ++ a)
    {
      final String input = args [a];

      final PlSql parser = new PlSql("-".equals(input) ? System.in : new FileInputStream(input));
      try
      {
        Function rootNode = parser.Start();
        rootNode.PrintElements();
        Tree myTree = new Tree();
        //myTree.buildTree(rootNode);      }
      catch (Throwable t)
      {
        System.err.println(input + ":1: not parsed");
        t.printStackTrace();
      }
    }
  }

  public Set < String > functions = new HashSet < String > ();

  public Set < String > procedures = new HashSet < String > ();

  public Set < String > tables = new HashSet < String > ();

  public void reInit(Reader input)
  {
    ReInit(input);
    functions.clear();
    procedures.clear();
    tables.clear();
  }

  private String lastObjectReference = null;

  protected boolean seeTYPE()
  {
    return "TYPE".equalsIgnoreCase(getToken(1).image);
  }

  final public Function Start() throws ParseException {
  Function func;
    func = FunctionDeclaration();
    {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

  final public Function FunctionDeclaration() throws ParseException {
  LinkedList < Parameter > pList;
  Token t;
  String ret;
  FunctionBody myFuncB;
  ScalarNode retExpr;
    jj_consume_token(K_FUNCTION);
    t = jj_consume_token(S_IDENTIFIER);
    jj_consume_token(152);
    pList = ParameterList();
    jj_consume_token(153);
    jj_consume_token(K_RETURNS);
    ret = BasicDataTypeDefinition();
    myFuncB = FunctionBody();
    jj_consume_token(K_RETURN);
    retExpr = SQLExpr();
    jj_consume_token(154);
    {if (true) return new Function(t.image, pList, ret, myFuncB, retExpr);}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList < Parameter > ParameterList() throws ParseException {
  LinkedList < Parameter > paramList = new LinkedList < Parameter > ();
  Parameter temp;
    temp = Parameter();
      paramList.add(temp);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 155:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(155);
      temp = Parameter();
        paramList.add(temp);
    }
    {if (true) return paramList;}
    throw new Error("Missing return statement in function");
  }

  final public Parameter Parameter() throws ParseException {
  Token t;
    t = jj_consume_token(S_IDENTIFIER);
    {if (true) return new Parameter(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public String BasicDataTypeDefinition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CHAR:
      jj_consume_token(K_CHAR);
    {if (true) return new String("char");}
      break;
    case K_VARCHAR:
      jj_consume_token(K_VARCHAR);
    {if (true) return new String("varchar");}
      break;
    case K_VARCHAR2:
      jj_consume_token(K_VARCHAR2);
    {if (true) return new String("varchar2");}
      break;
    case K_INTEGER:
      jj_consume_token(K_INTEGER);
    {if (true) return new String("int");}
      break;
    case K_NUMBER:
      jj_consume_token(K_NUMBER);
    {if (true) return new String("number");}
      break;
    case K_NATURAL:
      jj_consume_token(K_NATURAL);
    {if (true) return new String("natural");}
      break;
    case K_REAL:
      jj_consume_token(K_REAL);
    {if (true) return new String("real");}
      break;
    case K_FLOAT:
      jj_consume_token(K_FLOAT);
    {if (true) return new String("float");}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FunctionBody FunctionBody() throws ParseException {
  LinkedList < PLSQLStmt > myStmtList = new LinkedList < PLSQLStmt > ();
  PLSQLStmt insertStmt;
    label_2:
    while (true) {
      insertStmt = PLSQLStmt();
      myStmtList.add(insertStmt);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DECLARE:
      case S_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    {if (true) return new FunctionBody(myStmtList);}
    throw new Error("Missing return statement in function");
  }

  final public PLSQLStmt PLSQLStmt() throws ParseException {
  PLSQLStmt myStmt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      myStmt = AssignmentStmt();
      break;
    case K_DECLARE:
      myStmt = DeclareStmt();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(154);
    {if (true) return myStmt;}
    throw new Error("Missing return statement in function");
  }

  final public AssignStatement AssignmentStmt() throws ParseException {
  ScalarNode myExpr;
  Token t;
    t = jj_consume_token(S_IDENTIFIER);
    jj_consume_token(156);
    myExpr = SQLExpr();
    {if (true) return new AssignStatement("asgn", t.image, myExpr);}
    throw new Error("Missing return statement in function");
  }

  final public DeclareStmt DeclareStmt() throws ParseException {
  String t;
  LinkedList < String > varList;
    jj_consume_token(K_DECLARE);
    t = BasicDataTypeDefinition();
    varList = VariableList();
    {if (true) return new DeclareStmt("decl", varList, t);}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList < String > VariableList() throws ParseException {
  LinkedList < String > strList = new LinkedList < String > ();
  String temp;
    temp = Variable();
      strList.add(temp);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 155:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(155);
      temp = Variable();
          strList.add(temp);
    }
    {if (true) return strList;}
    throw new Error("Missing return statement in function");
  }

  final public String Variable() throws ParseException {
  Token t;
    t = jj_consume_token(S_IDENTIFIER);
    {if (true) return new String(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public ScalarNode SQLExpr() throws ParseException {
  SQLQueryNode n;
  SimpleExp y;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
    case 158:
    case 159:
      y = SQLSimpleExpression();
    {if (true) return new ScalarNode(1, y);}
      break;
    case K_SELECT:
    case 152:
      n = SelectStatement();
    {if (true) return new ScalarNode(2, n);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String SimExpr() throws ParseException {
  Token t;
    t = jj_consume_token(S_IDENTIFIER);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/**
		SQL Query Part
**/
  final public SQLQueryNode SelectStatement() throws ParseException {
  SelWithoutOrderNode sn = new SelWithoutOrderNode();
  OrderByNode on = new OrderByNode();
  boolean isOrderImposed = false;
    sn = SelectWithoutOrder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ORDER:
      on = OrderByClause();
      isOrderImposed = true;
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    if (isOrderImposed)
    {
      on.addChild(sn);
      {if (true) return on;}
    }
    else
    {
      {if (true) return sn;}
    }
    throw new Error("Missing return statement in function");
  }

  final public SelWithoutOrderNode SelectWithoutOrder() throws ParseException {
  SelWithoutOrderNode sn = new SelWithoutOrderNode();
  SQLQueryNode n = new SQLQueryNode();
  int type = 0;
    n = SelectSet();
    sn.add(n);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INTERSECT:
      case K_MINUS:
      case K_UNION:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_UNION:
        jj_consume_token(K_UNION);
        type = 1;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
          type = 2;
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        break;
      case K_INTERSECT:
        jj_consume_token(K_INTERSECT);
        type = 3;
        break;
      case K_MINUS:
        jj_consume_token(K_MINUS);
        type = 4;
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n = SelectSet();
      sn.add(type, n);
    }
    {if (true) return sn;}
    throw new Error("Missing return statement in function");
  }

  final public SQLQueryNode SelectSet() throws ParseException {
  SQLQueryNode n = new SQLQueryNode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SELECT:
      n = Select();
    {if (true) return n;}
      break;
    case 152:
      jj_consume_token(152);
      n = SubQuery();
      jj_consume_token(153);
    {if (true) return n;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ProjectNode Select() throws ParseException {
 /*@bgen(jjtree) Sel */
  Sel jjtn000 = new Sel(this, JJTSEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ProjectNode pn = new ProjectNode();
  SelectNode sn = new SelectNode();
  FromNode fn = new FromNode();
  GroupByNode gn = new GroupByNode();
  SQLPredicate hPred = new SQLPredicate();
  int projectType = 0;
  boolean isGroupBy = false;
  boolean isWhere = false;
    try {
      jj_consume_token(K_SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
      case K_UNIQUE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
      projectType = 1;
          break;
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
      projectType = 2;
          break;
        case K_UNIQUE:
          jj_consume_token(K_UNIQUE);
      projectType = 3;
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    Proj jjtn001 = new Proj(this, JJTPROJ);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        pn = SelectList();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    pn.setType(projectType);
    From jjtn002 = new From(this, JJTFROM);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        //[IntoClause()]
          fn = FromClause();
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
      where jjtn003 = new where(this, JJTWHERE);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
        try {
          sn = WhereClause();
        } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte003;}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) throw (ParseException)jjte003;}
      }
      {if (true) throw (Error)jjte003;}
        } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
        }
      isWhere = true;
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_GROUP:
        gn = GroupByClause();
      isGroupBy = true;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_HAVING:
          hPred = HavingClause();
        gn.setHavingPred(hPred);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (isWhere)
    {
      sn.setChildNode(fn);
      if (isGroupBy)
      {
        gn.setChildNode(sn);
        pn.setChildNode(gn);
      }
      else
      {
        pn.setChildNode(sn);
      }
    }
    else
    {
      if (isGroupBy)
      {
        gn.setChildNode(fn);
        pn.setChildNode(gn);
      }
      else
      {
        pn.setChildNode(fn);
      }
    }
    {if (true) return pn;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* Checks for whatever follows  SELECT */
  final public ProjectNode SelectList() throws ParseException {
  ProjectNode pn = new ProjectNode();
  SelectItem si = new SelectItem();
  boolean isProjectAll = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 157:
      jj_consume_token(157);
    {if (true) return new ProjectNode(isProjectAll);}
      break;
    case K_NULL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
    case 158:
    case 159:
      si = SelectItem();
    pn.add(si);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 155:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_5;
        }
        jj_consume_token(155);
        si = SelectItem();
      pn.add(si);
      }
    {if (true) return pn;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SelectItem SelectItem() throws ParseException {
  SimpleExp e;
  String alias = new String();
  boolean isAlias = false;
  SelectItem si = new SelectItem();
    //LOOKAHEAD(2) OracleObjectName()".*" // table.*
        //| LOOKAHEAD(4) OracleObjectName()"." OracleObjectName() ".*" // schema.table.*
        e = SQLSimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      alias = SelectItemAlias();
      isAlias = true;
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    if (isAlias)
    {
      si.add(e, alias);
    }
    else
    {
      si.add(e);
    }
    {if (true) return si;}
    throw new Error("Missing return statement in function");
  }

  final public String SelectItemAlias() throws ParseException {
  String alias;
    alias = OracleObjectName();
    {if (true) return alias;}
    throw new Error("Missing return statement in function");
  }

  final public SQLQueryNode SubQuery() throws ParseException {
  SQLQueryNode sn = new SQLQueryNode();
    sn = SelectStatement();
    {if (true) return sn;}
    throw new Error("Missing return statement in function");
  }

  final public FromNode FromClause() throws ParseException {
  FromNode fn = new FromNode();
  QueryTableExp e = new QueryTableExp();
    jj_consume_token(K_FROM);
    e = QueryTableExpression();
    fn.add(e);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 155:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_6;
      }
      jj_consume_token(155);
      e = QueryTableExpression();
      fn.add(e);
    }
    {if (true) return fn;}
    throw new Error("Missing return statement in function");
  }

  final public SelectNode WhereClause() throws ParseException {
  SQLPredicate p = new SQLPredicate();
    jj_consume_token(K_WHERE);
    p = SQLExpression();
    {if (true) return new SelectNode(p);}
    throw new Error("Missing return statement in function");
  }

  final public GroupByNode GroupByClause() throws ParseException {
  GroupByNode gn = new GroupByNode();
  LinkedList < String > grpExpList = new LinkedList< String >();
  String s;
    jj_consume_token(K_GROUP);
    jj_consume_token(K_BY);
    s = TableColumn();
    grpExpList.add(s);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 155:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      jj_consume_token(155);
      TableColumn();
      grpExpList.add(s);
    }
    gn.setGrpExpList(grpExpList);
    {if (true) return gn;}
    throw new Error("Missing return statement in function");
  }

  final public SQLPredicate HavingClause() throws ParseException {
  SQLPredicate pred;
    jj_consume_token(K_HAVING);
    pred = SQLExpression();
    {if (true) return pred;}
    throw new Error("Missing return statement in function");
  }

  final public OrderByNode OrderByClause() throws ParseException {
  OrderByNode on = new OrderByNode();
  OrderByExpression e = new OrderByExpression();
    jj_consume_token(K_ORDER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SIBLINGS:
      jj_consume_token(K_SIBLINGS);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(K_BY);
    e = OrderByExpression();
    on.addExp(e);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 155:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      jj_consume_token(155);
      e = OrderByExpression();
      on.addExp(e);
    }
    {if (true) return on;}
    throw new Error("Missing return statement in function");
  }

  final public OrderByExpression OrderByExpression() throws ParseException {
  SimpleExp e;
  int orderType = 0;
  boolean isOrderType = false;
  OrderByExpression oe = new OrderByExpression();
    e = SQLSimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ASC:
    case K_DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
        jj_consume_token(K_ASC);
      orderType = 1;
        break;
      case K_DESC:
        jj_consume_token(K_DESC);
      orderType = 2;
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    oe.setData(e, orderType);
    {if (true) return oe;}
    throw new Error("Missing return statement in function");
  }

  final public SimpleExp SQLSimpleExpression() throws ParseException {
  MultiplyExp rand1;
  SimpleExp rand2 = new SimpleExp();
  String rator = "";
  boolean isBinaryExpr = false;
    rand1 = SQLMultiplicativeExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 158:
    case 159:
      rator = SimpleOp();
      rand2 = SQLSimpleExpression();
      isBinaryExpr = true;
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    if (isBinaryExpr)
    {
      {if (true) return new SimpleExp(rand1, rator, rand2);}
    }
    else
    {
      {if (true) return new SimpleExp(rand1);}
    }
    throw new Error("Missing return statement in function");
  }

  final public String SimpleOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 158:
      jj_consume_token(158);
    {if (true) return new String("+");}
      break;
    case 159:
      jj_consume_token(159);
    {if (true) return new String("-");}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MultiplyExp SQLMultiplicativeExpression() throws ParseException {
  ExponentExp rand1;
  MultiplyExp rand2 = new MultiplyExp();
  String rator = "";
  boolean isBinaryExpr = false;
    rand1 = SQLExponentExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 157:
    case 160:
      rator = MultiplyOp();
      rand2 = SQLMultiplicativeExpression();
      isBinaryExpr = true;
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    if (isBinaryExpr)
    {
      {if (true) return new MultiplyExp(rand1, rator, rand2);}
    }
    else
    {
      {if (true) return new MultiplyExp(rand1);}
    }
    throw new Error("Missing return statement in function");
  }

  final public String MultiplyOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 157:
      jj_consume_token(157);
    {if (true) return new String("*");}
      break;
    case 160:
      jj_consume_token(160);
    {if (true) return new String("/");}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExponentExp SQLExponentExpression() throws ParseException {
  UnaryExp rand1;
  ExponentExp rand2 = new ExponentExp();
  boolean isBinaryExpr = false;
    rand1 = SQLUnaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 161:
      jj_consume_token(161);
      rand2 = SQLExponentExpression();
      isBinaryExpr = true;
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    if (isBinaryExpr)
    {
      {if (true) return new ExponentExp(rand1, rand2);}
    }
    else
    {
      {if (true) return new ExponentExp(rand1);}
    }
    throw new Error("Missing return statement in function");
  }

  final public UnaryExp SQLUnaryExpression() throws ParseException {
  PrimaryExp rand;
  String s = "";
  boolean isSignAssigned = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 158:
    case 159:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 158:
        jj_consume_token(158);
      s = "+";
      isSignAssigned = true;
        break;
      case 159:
        jj_consume_token(159);
      s = "-";
      isSignAssigned = true;
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    rand = SQLPrimaryExpression();
    if (isSignAssigned)
    {
      {if (true) return new UnaryExp(s, rand);}
    }
    else
    {
      {if (true) return new UnaryExp(rand);}
    }
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExp SQLPrimaryExpression() throws ParseException {
  Token t;
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_NUMBER:
      t = jj_consume_token(S_NUMBER);
    {if (true) return new PrimaryExp(1, Integer.parseInt(t.image));}
      break;
    case K_NULL:
      jj_consume_token(K_NULL);
    {if (true) return new PrimaryExp(3);}
      break;
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      s = TableColumn();
    {if (true) return new PrimaryExp(2, s);}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String TableColumn() throws ParseException {
  String s;
    s = ObjectReference();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String OracleObjectName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
    {if (true) return token.image;}
      break;
    case S_QUOTED_IDENTIFIER:
      jj_consume_token(S_QUOTED_IDENTIFIER);
    String s = token.image;
    {if (true) return s.substring(1, s.length() - 1);}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
void TableReference():
{}
{
    "ONLY" "(" QueryTableExpression() ")"
  | QueryTableExpression()
}
*/
  final public String ObjectReference() throws ParseException {
  String s;
  StringBuilder name = new StringBuilder();
    s = OracleObjectName();
    name.append(s);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 162:
      jj_consume_token(162);
      s = OracleObjectName();
      name.append(".").append(s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 162:
        jj_consume_token(162);
        s = OracleObjectName();
        name.append(".").append(s);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    {if (true) return lastObjectReference = name.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String TableName() throws ParseException {
  String s;
  StringBuilder name = new StringBuilder();
    // schema.table@link
      s = OracleObjectName();
    name.append(s);
    tables.add(name.toString().toUpperCase());
    {if (true) return name.toString();}
    throw new Error("Missing return statement in function");
  }

  final public QueryTableExp QueryTableExpression() throws ParseException {
  String tableName;
  SQLQueryNode n = new SQLQueryNode();
  int type = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      tableName = TableName();
      {if (true) return new QueryTableExp(tableName);}
      break;
    default:
      jj_la1[37] = jj_gen;
      if (jj_2_1(3)) {
        jj_consume_token(152);
        n = SubQuery();
        jj_consume_token(153);
      {if (true) return new QueryTableExp(n);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      OracleObjectName();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLPredicate SQLExpression() throws ParseException {
  SQLPredicate rand1;
  SQLPredicate rand2 = null;
  boolean isBinaryPred = false;
    rand1 = SQLAndExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_OR:
      jj_consume_token(K_OR);
      rand2 = SQLExpression();
      isBinaryPred = true;
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    if (isBinaryPred)
    {
      {if (true) return new SQLOrPred(rand1, rand2);}
    }
    else
    {
      {if (true) return rand1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLPredicate SQLAndExpression() throws ParseException {
  SQLPredicate rand1;
  SQLPredicate rand2 = null;
  boolean isBinaryPred = false;
    rand1 = SQLUnaryLogicalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AND:
      jj_consume_token(K_AND);
      rand2 = SQLAndExpression();
      isBinaryPred = true;
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    if (isBinaryPred)
    {
      {if (true) return new SQLAndPred(rand1, rand2);}
    }
    else
    {
      {if (true) return rand1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLPredicate SQLUnaryLogicalExpression() throws ParseException {
  SQLPredicate rand;
  //SQLExistsPred exiPred;
  //SQLRelExprPred relPred;
  boolean isNeg = false;
    if (jj_2_2(2)) {
      rand = ExistsClause();
    {if (true) return rand;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
      case 158:
      case 159:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          jj_consume_token(K_NOT);
        isNeg = true;
          break;
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        rand = SQLRelationalExpression();
    if (isNeg) rand.setNeg(isNeg);
    {if (true) return rand;}
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLPredicate ExistsClause() throws ParseException {
  SQLExistsPred ret = new SQLExistsPred();
  boolean isNeg = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      isNeg = true;
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    jj_consume_token(K_EXISTS);
    jj_consume_token(152);
    SubQuery();
    jj_consume_token(153);
    if (isNeg) ret.setNeg(isNeg);
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/*here*/
  final public SQLPredicate SQLRelationalExpression() throws ParseException {
  SimpleExp leftRand;
  boolean isNeg = false;
  Pred_RightOperand rightRand = new Pred_RightOperand();
    /* Only after looking past "(", Expression() and "," we will know that
           it is expression list */
      leftRand = SQLSimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 156:
    case 163:
    case 164:
    case 165:
    case 166:
      rightRand = SQLRelationalOperatorExpression();
      break;
    default:
      jj_la1[44] = jj_gen;
      if (jj_2_3(2)) {
        rightRand = SQLInClause();
      } else if (jj_2_4(2)) {
        rightRand = SQLBetweenClause();
      } else if (jj_2_5(2)) {
        rightRand = SQLLikeClause();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new SQLRelExprPred(leftRand, rightRand);}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList < SQLPredicate > SQLExpressionList() throws ParseException {
  LinkedList < SQLPredicate > predList = new LinkedList < SQLPredicate > ();
  SQLPredicate temp;
    temp = SQLExpression();
    predList.add(temp);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 155:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_9;
      }
      jj_consume_token(155);
      temp = SQLExpression();
      predList.add(temp);
    }
    {if (true) return predList;}
    throw new Error("Missing return statement in function");
  }

  final public Pred_RightOperand SQLRelationalOperatorExpression() throws ParseException {
  String relOp;
  SQLQueryNode n;
  SimpleExp s;
  int type;
    relOp = Relop();
    if (jj_2_6(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_ANY:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
          type = 1;
          break;
        case K_ANY:
          jj_consume_token(K_ANY);
          type = 2;
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(152);
      SubQuery();
      jj_consume_token(153);
      {if (true) return new SQLRelOpExp();}
      //return new SQLRelOpExp(relOp, type, null, n);

    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
      case 158:
      case 159:
        s = SQLSimpleExpression();
      {if (true) return new SQLRelOpExp();}
      //return new SQLRelOpExp(relOp, 3, s, null);

        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 156:
      jj_consume_token(156);
    {if (true) return "=";}
      break;
    case 163:
      jj_consume_token(163);
      jj_consume_token(156);
    {if (true) return "!=";}
      break;
    case 164:
      jj_consume_token(164);
    {if (true) return "#";}
      break;
    default:
      jj_la1[49] = jj_gen;
      if (jj_2_7(2)) {
        jj_consume_token(165);
        jj_consume_token(156);
    {if (true) return ">=";}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 165:
          jj_consume_token(165);
    {if (true) return ">";}
          break;
        default:
          jj_la1[50] = jj_gen;
          if (jj_2_8(2)) {
            jj_consume_token(166);
            jj_consume_token(165);
    {if (true) return "<>";}
          } else if (jj_2_9(2)) {
            jj_consume_token(166);
            jj_consume_token(156);
    {if (true) return "<=";}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 166:
              jj_consume_token(166);
    {if (true) return "<";}
              break;
            default:
              jj_la1[51] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Pred_RightOperand SQLInClause() throws ParseException {
  boolean isNeg = false;
  SQLQueryNode n = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      isNeg = true;
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
    jj_consume_token(152);
    SubQuery();
    jj_consume_token(153);
    {if (true) return new SQLInClause(isNeg, n);}
    throw new Error("Missing return statement in function");
  }

  final public Pred_RightOperand SQLBetweenClause() throws ParseException {
  SimpleExp lowerLim;
  SimpleExp upperLim;
  boolean isNeg = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      isNeg = true;
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    lowerLim = SQLSimpleExpression();
    jj_consume_token(K_AND);
    upperLim = SQLSimpleExpression();
    {if (true) return new SQLBetweenClause(isNeg, lowerLim, upperLim);}
    throw new Error("Missing return statement in function");
  }

  final public Pred_RightOperand SQLLikeClause() throws ParseException {
  SimpleExp cmpExp;
  SimpleExp escapeExp = null;
  boolean isNeg = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      isNeg = true;
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    cmpExp = SQLSimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ESCAPE:
      jj_consume_token(K_ESCAPE);
      escapeExp = SQLSimpleExpression();
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    if (escapeExp == null)
    {
      {if (true) return new SQLLikeClause(isNeg, cmpExp);}
    }
    else
    {
      {if (true) return new SQLLikeClause(isNeg, cmpExp, escapeExp);}
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(152)) return true;
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(S_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(K_UNIQUE)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(K_DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(152)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(158)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(166)) return true;
    if (jj_scan_token(156)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(166)) return true;
    if (jj_scan_token(165)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(157)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(152)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(165)) return true;
    if (jj_scan_token(156)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(S_QUOTED_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_scan_token(152)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(152)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public PlSqlTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[56];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x120,0x120,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x80020000,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x2000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x8400,0x0,0x0,0x0,0x2000,0x200000,0x201,0x0,0x201,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x800,0x2800,0x800,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x800,0x800,0x800,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x4,0x0,0x0,0x0,0x8000,0x0,0x20000000,0x0,0x20000000,0x8000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x8000000,0x18,0x40000,0x40000,0x8000000,0xc1841000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x80,0x0,0x0,0x8000000,0xe0841000,0x0,0x840000,0x8000000,0x8000000,0x0,0x8000000,0x0,0x0,0xc0000000,0xc0000000,0x20000000,0x20000000,0x0,0xc0000000,0xc0000000,0x841000,0x840000,0x0,0x0,0x840000,0x840000,0x0,0x0,0x0,0xc0841000,0x0,0x10000000,0x8000000,0x0,0x0,0xc0841000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x2,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78,0x0,0x0,0x0,0x0,0x18,0x20,0x40,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PlSql(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PlSql(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PlSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PlSql(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PlSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PlSql(PlSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PlSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[167];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 56; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 167; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
