/* Generated By:JJTree&JavaCC: Do not edit this line. PlSqlTokenManager.java */
package apr.twenty;
import java.util.LinkedList;
import java.util.LinkedList;
import java.io.Reader;
import java.io.FileInputStream;
import apr.twenty.custom.*;
import apr.twenty.tree.*;
import java.util.HashSet;
import java.util.Set;
import java.util.Iterator;

/** Token Manager. */
@SuppressWarnings("all")
public class PlSqlTokenManager implements PlSqlConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x80000000L) != 0L)
            return 0;
         if ((active2 & 0x400000000L) != 0L)
            return 68;
         if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xfffL) != 0L)
         {
            jjmatchedKind = 146;
            return 69;
         }
         if ((active2 & 0x100000000L) != 0L)
            return 3;
         return -1;
      case 1:
         if ((active0 & 0x3ffffbfffff79e0L) != 0L || (active1 & 0xf7ffffffffc8fff0L) != 0L || (active2 & 0xfffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 146;
               jjmatchedPos = 1;
            }
            return 69;
         }
         if ((active0 & 0xfc00004000008600L) != 0L || (active1 & 0x80000000037000fL) != 0L)
            return 69;
         return -1;
      case 2:
         if ((active1 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 146;
               jjmatchedPos = 2;
            }
            return 11;
         }
         if ((active0 & 0xc0200000005a0L) != 0L || (active1 & 0x42181000400800L) != 0L || (active2 & 0x1L) != 0L)
            return 69;
         if ((active0 & 0xf3f3fdbfffff7840L) != 0L || (active1 & 0xf7bde7efbfacf7fbL) != 0L || (active2 & 0xffeL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 146;
               jjmatchedPos = 2;
            }
            return 69;
         }
         return -1;
      case 3:
         if ((active0 & 0xb08090800f0000L) != 0L || (active1 & 0x6101006008c60f2L) != 0L || (active2 & 0x660L) != 0L)
            return 69;
         if ((active0 & 0xf34b7d2f7ff07840L) != 0L || (active1 & 0xf1ade7e9bf209709L) != 0L || (active2 & 0x99eL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 146;
               jjmatchedPos = 3;
            }
            return 69;
         }
         if ((active1 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 146;
               jjmatchedPos = 3;
            }
            return 11;
         }
         return -1;
      case 4:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 4;
            return 11;
         }
         if ((active0 & 0xc2487c2f7fe07000L) != 0L || (active1 & 0xd029e5e82f009409L) != 0L || (active2 & 0x1cL) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 4;
            return 69;
         }
         if ((active0 & 0x3103010000100840L) != 0L || (active1 & 0x2184020190204300L) != 0L || (active2 & 0x982L) != 0L)
            return 69;
         return -1;
      case 5:
         if ((active0 & 0x804038272f207000L) != 0L || (active1 & 0x1029450027000409L) != 0L || (active2 & 0x18L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 146;
               jjmatchedPos = 5;
            }
            return 69;
         }
         if ((active1 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 146;
               jjmatchedPos = 5;
            }
            return 11;
         }
         if ((active0 & 0x4208440850c00000L) != 0L || (active1 & 0xc000a0e808009000L) != 0L || (active2 & 0x4L) != 0L)
            return 69;
         return -1;
      case 6:
         if ((active0 & 0x8000000721205000L) != 0L || (active1 & 0x14001000400L) != 0L || (active2 & 0x18L) != 0L)
            return 69;
         if ((active0 & 0x4038200e800000L) != 0L || (active1 & 0x1029448026000009L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 146;
               jjmatchedPos = 6;
            }
            return 69;
         }
         if ((active0 & 0x2000L) != 0L || (active1 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 146;
               jjmatchedPos = 6;
            }
            return 11;
         }
         return -1;
      case 7:
         if ((active0 & 0x38000c800000L) != 0L || (active1 & 0x1001408022000009L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 7;
            return 69;
         }
         if ((active0 & 0x40002002000000L) != 0L || (active1 & 0x28040004000000L) != 0L)
            return 69;
         if ((active2 & 0x8L) != 0L)
            return 11;
         if ((active0 & 0x2000L) != 0L || (active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 7;
            return 11;
         }
         return -1;
      case 8:
         if ((active0 & 0xc000000L) != 0L || (active1 & 0x1001000000000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 146;
               jjmatchedPos = 8;
            }
            return 69;
         }
         if ((active0 & 0x2000L) != 0L || (active1 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 146;
               jjmatchedPos = 8;
            }
            return 11;
         }
         if ((active0 & 0x380000800000L) != 0L || (active1 & 0x408022000009L) != 0L)
            return 69;
         return -1;
      case 9:
         if ((active0 & 0xc000000L) != 0L)
            return 69;
         if ((active1 & 0x1001000000000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 146;
               jjmatchedPos = 9;
            }
            return 69;
         }
         if ((active1 & 0x40000000L) != 0L)
            return 11;
         if ((active0 & 0x100000002000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 146;
               jjmatchedPos = 9;
            }
            return 11;
         }
         return -1;
      case 10:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 10;
            return 69;
         }
         if ((active0 & 0x8000000L) != 0L || (active1 & 0x1000000000000000L) != 0L)
            return 69;
         if ((active0 & 0x100000002000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 10;
            return 11;
         }
         return -1;
      case 11:
         if ((active1 & 0x1000000000000L) != 0L)
            return 69;
         if ((active0 & 0x100000002000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 11;
            return 11;
         }
         return -1;
      case 12:
         if ((active0 & 0x100000002000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 12;
            return 11;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 163);
      case 35:
         return jjStopAtPos(0, 164);
      case 40:
         return jjStopAtPos(0, 152);
      case 41:
         return jjStopAtPos(0, 153);
      case 42:
         jjmatchedKind = 157;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000L);
      case 43:
         return jjStopAtPos(0, 158);
      case 44:
         return jjStopAtPos(0, 155);
      case 45:
         return jjStartNfaWithStates_0(0, 159, 0);
      case 46:
         return jjStartNfaWithStates_0(0, 162, 68);
      case 47:
         return jjStartNfaWithStates_0(0, 160, 3);
      case 59:
         return jjStopAtPos(0, 154);
      case 60:
         return jjStopAtPos(0, 166);
      case 61:
         return jjStopAtPos(0, 156);
      case 62:
         return jjStopAtPos(0, 165);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7e0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xf800L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7fff0000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7f80000000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0xff8000000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7f000000000000L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x180000000000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0xfc00000000000000L, 0xfL, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc00L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff0000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fff80000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffe00000000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f00000000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000000000L, 0x3L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1cL);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfe0L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000080070000L, active1, 0x100600183000400L, active2, 0x3cL);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1001f00001800L, active1, 0x20381fe00000110L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 58, 69);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 80, 69);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x404000000000000L, active2, 0x1c0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000002000L, active1, 0x8020000000220L, active2, 0x200L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2018000100060L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xf000020000000180L, active1, 0x6000000000040003L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 69);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 123, 69);
         return jjMoveStringLiteralDfa2_0(active0, 0x8c00000fe04000L, active1, 0x1c00040018c0L, active2, 0x400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000080000L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x110000010000000L, active1, 0x1000000038200000L, active2, 0x800L);
      case 83:
      case 115:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000400L, active1, 0x8L, active2, 0x3L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000060000000L, active1, 0x40e000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0xf80000000000L, active1, 0x40000000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0x10a4000608000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x108000000000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 69);
         return jjMoveStringLiteralDfa3_0(active0, 0x3c0300000000L, active1, 0x801000040L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 69);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 69);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x8000000000200000L, active2, 0L);
      case 69:
      case 101:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 128, 69);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0x400000000880000L, active2, 0xc0L);
      case 70:
      case 102:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 100, 69);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x10L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0x20000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000000L, active1, 0x6010000090000000L, active2, 0x922L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 69);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 118, 69);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000800010000L, active1, 0x840000046000L, active2, 0x4L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0xe00000L, active1, 0x200000008000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x204000000f002000L, active1, 0x100000200L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x112000000104000L, active1, 0x20000088L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000060000000L, active1, 0x1000002000100L, active2, 0x418L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400001b000060000L, active1, 0x200000004000000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 69);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 69);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 113, 69);
         return jjMoveStringLiteralDfa3_0(active0, 0x8081000080001040L, active1, 0xe000000403L, active2, 0x200L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x410000000000L, active2, 0L);
      case 87:
      case 119:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000001000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xa040410002000L, active1, 0x8000000000001000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 69);
         return jjMoveStringLiteralDfa4_0(active0, 0x41000000000000L, active1, 0x20000000L, active2, 0x18L);
      case 68:
      case 100:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 69);
         break;
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 69);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 69);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 69);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 69);
         return jjMoveStringLiteralDfa4_0(active0, 0xf000180800000040L, active1, 0xc10000200001L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x148000100L, active2, 0L);
      case 72:
      case 104:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 137, 69);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200010100000800L, active1, 0x1000004000000L, active2, 0L);
      case 75:
      case 107:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 69);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 69);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 69);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 69);
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 69);
         return jjMoveStringLiteralDfa4_0(active0, 0x200200004000L, active1, 0x128040000004008L, active2, 0x100L);
      case 77:
      case 109:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 69);
         return jjMoveStringLiteralDfa4_0(active0, 0xe00000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 69);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 122, 69);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 134, 69);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0x1000000000000000L, active2, 0x2L);
      case 79:
      case 111:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 69);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 69);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000810000000L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 69);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 69);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 69);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 69);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x84000000000000L, active2, 0x80L);
      case 83:
      case 115:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 69);
         return jjMoveStringLiteralDfa4_0(active0, 0x40004e100000L, active1, 0x80000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 69);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 69);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 69);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 69);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 133, 69);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x2000000L, active2, 0x800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0xe000000600L, active2, 0x4L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x1000001000008L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 69);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 69);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 69);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 69);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 69);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 69);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 135, 69);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 136, 69);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 139, 69);
         return jjMoveStringLiteralDfa5_0(active0, 0x21205000L, active1, 0x20008000L, active2, 0x4L);
      case 70:
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 69);
         break;
      case 71:
      case 103:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 129, 69);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 69);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x18L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000c00000L, active1, 0x8000002001000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x20200000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0x8000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 69);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 69);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 69);
         return jjMoveStringLiteralDfa5_0(active0, 0x1c0000000000L, active1, 0x400000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 69);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 69);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 69);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 69);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000002000L, active1, 0x1e840000401L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 69);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 69);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 69);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 69);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 119, 69);
         return jjMoveStringLiteralDfa5_0(active0, 0x4040081e000000L, active1, 0x8000000004000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200400000000L, active1, 0x4000000000000000L, active2, 0L);
      case 88:
      case 120:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 69);
         return jjMoveStringLiteralDfa6_0(active0, 0x102004000L, active1, 0x1000040040000400L, active2, 0x18L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 69);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 69);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 69);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 69);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 69);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 126, 69);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 127, 69);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000001000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 69);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0x20000004000000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 69);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0x1000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2020200000L, active1, 0x800c000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 69);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 69);
         return jjMoveStringLiteralDfa6_0(active0, 0x20c000000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 69);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 130, 69);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0x10000000001L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 69);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 69);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 69);
         return jjMoveStringLiteralDfa6_0(active0, 0x180000800000L, active1, 0x2000008L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0x1000040000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 69);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 69);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 104, 69);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x380000000000L, active1, 0x1408002000008L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 69);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 69);
         break;
      case 78:
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 69);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 69);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0x20000040000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 69);
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 83:
      case 115:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 102, 69);
         break;
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 69);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 69);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 69);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 69);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 131, 11);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 69);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0xc002000L, active1, 0L, active2, 0L);
      case 75:
      case 107:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 106, 69);
         break;
      case 78:
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 69);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x408000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000000000L, active1, 0x2000008L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 115, 69);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 69);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 69);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 117, 69);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000L);
      case 68:
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 69);
         break;
      case 69:
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 69);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 93, 69);
         break;
      case 71:
      case 103:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 103, 69);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000L);
      case 78:
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 69);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 89, 69);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000c002000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 69);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 110, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000000L);
      case 69:
      case 101:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 94, 11);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x8002000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000000000L);
      case 78:
      case 110:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 124, 69);
         break;
      case 83:
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 27, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 112, 69);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(13, 13, 11);
         break;
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 44, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 68;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(48, 58);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(45, 46);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(40, 41);
                  else if (curChar == 58)
                     jjAddStates(7, 9);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 69:
               case 11:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  jjCheckNAdd(11);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAdd(58);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddTwoStates(48, 49);
                  }
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 42)
                     jjCheckNAddStates(10, 12);
                  break;
               case 6:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 8:
                  if (curChar == 47 && kind > 145)
                     kind = 145;
                  break;
               case 9:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 12:
                  if (curChar == 58)
                     jjAddStates(7, 9);
                  break;
               case 14:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjAddStates(13, 14);
                  break;
               case 15:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddStates(15, 21);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 46)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(22, 23);
                  break;
               case 26:
                  if (curChar == 46)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddStates(24, 26);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar == 46)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddStates(27, 29);
                  break;
               case 34:
                  if (curChar == 46)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddTwoStates(35, 24);
                  break;
               case 36:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddTwoStates(38, 24);
                  break;
               case 39:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 40:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar != 39)
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(43, 41);
                  break;
               case 43:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 41);
                  break;
               case 44:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 45:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if (curChar == 34 && kind > 151)
                     kind = 151;
                  break;
               case 47:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(48, 58);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 51:
                  if (curChar == 46)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(32, 34);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(54);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar == 46)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(57);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(58);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(0, 6);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(60, 49);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(35, 37);
                  break;
               case 62:
                  if (curChar == 46)
                     jjCheckNAdd(63);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(63, 49);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (curChar == 46)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(66);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(67);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 10:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 146)
                        kind = 146;
                     jjCheckNAdd(11);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 146)
                        kind = 146;
                     jjCheckNAddTwoStates(10, 11);
                  }
                  break;
               case 1:
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  jjCheckNAddTwoStates(7, 5);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  jjCheckNAdd(11);
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddStates(38, 40);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(17);
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(41, 43);
                  break;
               case 40:
                  jjCheckNAddTwoStates(40, 41);
                  break;
               case 43:
                  jjCheckNAddTwoStates(43, 41);
                  break;
               case 45:
                  jjAddStates(44, 45);
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 48);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 40:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(43, 41);
                  break;
               case 45:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 68 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   60, 61, 62, 49, 64, 65, 67, 13, 18, 36, 5, 6, 8, 14, 15, 19, 
   20, 21, 23, 33, 34, 24, 26, 28, 29, 30, 31, 33, 34, 24, 51, 53, 
   54, 55, 56, 61, 62, 49, 13, 14, 15, 25, 26, 28, 45, 46, 50, 51, 
   53, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\73", "\54", "\75", "\52", "\53", "\55", "\57", "\52\52", "\56", "\41", 
"\43", "\76", "\74", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0x7fffe41fffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x30000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x30000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[68];
private final int[] jjstateSet = new int[136];
protected char curChar;
/** Constructor. */
public PlSqlTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PlSqlTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 68; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
